%%%% Redefinitions

%{%
  This file includes definitions of operations with
  more appropriate names and/or arguments than the
  ones created by map.
%}%

%abbrev set = map.
%abbrev 0 = map/0.
%abbrev set/0 = map/0.
%abbrev set/+ = [N] [S] (map/+ N unit/ S).
%abbrev set/1 : nat -> set = [N] (set/+ N set/0).


%%  To avoid nasty skolemization functions, we do some explicit typing:

%abbrev set/+-preserves-eq = [NE:nat`eq N NP] [ME:eq M MP]
        (map/+-preserves-eq NE unit`eq/ ME).

%abbrev set/+-preserves-leq = [NE:nat`eq N NP] [ML:leq M MP]
        (map/+-preserves-leq NE unit`eq/ ML).


%abbrev member = [S] [N] lookup S N unit/.

%abbrev member/1 = (lookup/= nat`eq/).

%{%
/*
%abbrev not-member = fresh.

%abbrev member? = domain?.
%abbrev member?/in = domain?/in.
%abbrev member?/out = domain?/out.
*/
%}%

%% 'join' and 'meet' and converted using CPP,
%% but some names do not quite work:

%abbrev union/= = [U] [E:nat`eq N1 N2] union/= U unit`union/ E.
%abbrev intersection/= = [I] [E:nat`eq N1 N2] intersection/= I unit`union/ E.

%abbrev add : set -> nat -> set -> type = [S1] [N] [S2] update S1 N unit/ S2.


%%% Theorem renamings.

%% using "member"

%abbrev false-implies-member = false-implies-lookup.
%abbrev fresh-member-implies-ne = fresh-lookup-not-equal.
%abbrev in-implies-member = in-implies-lookup.

%abbrev member-respects-eq = 
    [L:member M N] [EM:eq M MP] [EN:nat`eq N NP] [LP:member MP NP] 
    lookup-respects-eq L EM EN unit`eq/ LP.

%abbrev member-respects-leq = 
    [L:member M N] [EM:leq M MP] [LP:member MP N]
    lookup-respects-leq L EM unit/ LP unit`eq/.

%abbrev member-implies-unit-leq =
    [L:member M N] [LE:leq (set/1 N) M]
    lookup-implies-unit-leq L LE.

%abbrev not-member-member-not-equal = not-member-lookup-not-equal.
%abbrev disjoint-member-contradiction = disjoint-lookup-contradiction.
%abbrev disjoint-member-implies-not-member = disjoint-lookup-implies-not-member.
%abbrev not-member-union-left-preserves-member-converse = not-member-union-left-preserves-lookup-converse.
%abbrev not-member-union-right-preserves-member-converse = not-member-union-right-preserves-lookup-converse.

%abbrev intersection-preserves-member =
	[MA: member A N] [MB:member B N]
	[I: intersection A B C]
	[MC: member C N]
	intersection-meets-lookup* MA MB I unit`union/ MC.

%abbrev intersection-preserves-member-converse :
	member C X -> intersection A B C -> member A X -> member B X -> type =
	[MC] [A^B] [MA] [MB]
	intersection-meets-lookup-converse 
		A^B MC unit/ unit/ MA MB unit`union/.

%abbrev max-implies-member :
	max S N -> member S N -> type =
	[MX] [ME] max-implies-lookup MX unit/ ME.

%abbrev max-member-implies-ge = max-lookup-implies-ge.

%abbrev min-implies-member :
	min S N -> member S N -> type =
	[MN] [ME] min-implies-lookup MN unit/ ME.

%abbrev min-member-implies-ge = min-lookup-implies-ge.


%% using "add"

%abbrev false-implies-add = false-implies-update.
%abbrev add-respects-eq 
	: add S1 X1 T1 -> eq S1 S2 -> nat`eq X1 X2 -> eq T1 T2 -> 
          add S2 X2 T2 -> type
	= [A] [ES] [EX] [ET] [AP] update-respects-eq A ES EX unit`eq/ ET AP.
%abbrev add-deterministic 
	: add S1 X1 T1 -> add S2 X2 T2 -> eq S1 S2 -> nat`eq X1 X2 ->
	  eq T1 T2 -> type
        = [A1] [A2] [ES] [EX] [ET] update-deterministic A1 A2 ES EX unit`eq/ ET.
%abbrev add-unique = add-deterministic.
%abbrev add-total* = update-total*.
%abbrev add-total = update-total.
%abbrev member-implies-add = lookup-implies-update.
%abbrev member-implies-not-member-add = lookup-implies-not-member-update.
%abbrev add-implies-member = update-implies-lookup.
% should not need NE : %abbrev add-preserves-member = update-preserves-lookup.
%abbrev add-preserves-not-member = update-preserves-not-member.
%abbrev add-preserves-membership = update-preserves-membership.
%abbrev add-preserves-member-converse = update-preserves-lookup-converse.
%abbrev add-preserves-not-member-converse = update-preserves-not-member-converse.
%abbrev add-overwrites = update-overwrites.
%abbrev add-member-has-no-effect 
	: member S1 X -> add S1 X S2 -> eq S1 S2 -> type
	= [M] [A] [E] update-may-have-no-effect M A E.
%abbrev add-idempotent = update-idempotent.
%abbrev add-commutes = update-commutes.
%abbrev add-commutes* = update-commutes*.
%abbrev add-preserves-leq* = update-left-preserves-leq*.
%abbrev not-member-add-preserves-disjoint = 
	not-member-update-preserves-disjoint.
%abbrev not-member-add-increases-size = not-member-update-increases-size.
%abbrev not-member-add-increases-size-converse = 
	not-member-update-increases-size-converse.
%abbrev not-member-add-cancels
	: not-member M1 N1 -> add M1 N1 M1P ->
	  not-member M2 N2 -> add M2 N2 M2P -> 
	  nat`eq N1 N2 -> eq M1P M2P -> eq M1 M2 -> type
	= [F1] [A1] [F2] [A2] [EQ1] [EQ2] [EQ3]
	  not-member-update-cancels F1 A1 F2 A2 EQ1 EQ2 unit`eq/ EQ3.
%abbrev not-member-add-preserves-leq-converse
	: leq M1P M2P -> not-member M1 N -> add M1 N M1P ->
	                 not-member M2 N -> add M2 N M2P ->
          leq M1 M2 -> type
	= [LP] [F1] [U1] [F2] [U2] [L]
	  not-member-update-preserves-leq-converse LP F1 U1 F2 U2 L unit`eq/.
%abbrev not-member-add2-preserves-leq-converse
	: leq M1 M2P ->  not-member M1 N -> 
	                 not-member M2 N -> add M2 N M2P ->
          leq M1 M2 -> type
	= [LP] [F1] [F2] [U2] [L]
	  not-member-update2-preserves-leq-converse LP F1 F2 U2 L.
%abbrev member-implies-ge = lookup-implies-ge.
%abbrev bound-member-implies-gt = bound-lookup-implies-gt.

%% using "union"

% nothing yet

