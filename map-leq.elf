
%{%
 /* We assume the existence of
  * data`leq
  * data`false-implies-leq
  * data`leq-reflexive
  * data`leq-anti-symmetric
  * data`leq-transitive
  */
#define MAP_LEQ 1
%}%



%%%% Map comparison



%%% Definition of leq

%{%
We always define leq? and nle even if we don't have these things in data.
This is simply for uniformity.  The relations are crippled if
data does not have the required relation.
%}%


leq? : map -> map -> bool -> type.

%abbrev leq : map -> map -> type = [M1] [M2] leq? M1 M2 true.

%abbrev nle : map -> map -> type = [M1] [M2] leq? M1 M2 false.


leq/0 : leq map/0 M.

leq/= : leq (map/+ N1 D1 M1) (map/+ N2 D2 M2)
    <- nat`eq N1 N2
    <- data`leq D1 D2
    <- leq M1 M2.

leq/> : leq (map/+ N1 D1 M1) (map/+ N2 D2 M2)
    <- nat`plus (s N3) N2 N1
    <- leq (map/+ N3 D1 M1) M2.


nle/< : lookup M1 N D1 -> fresh M2 N -> nle M1 M2.

%{%
#ifdef DATA_NLE
%}%
nle/= : lookup M1 N D1 -> lookup M2 N D2 -> data`nle D1 D2 -> nle M1 M2.
%{%
#endif
%}%

%abbrev leq?/yes : leq M1 M2 -> leq? M1 M2 true = [x] x.

%abbrev leq?/no : nle M1 M2 -> leq? M1 M2 false = [x] x.



%%% Theorems about leq


%theorem false-implies-leq? :
	forall* {M1} {M2} {B}
	forall {F:void}
	exists {L:leq? M1 M2 B}
	true.

%worlds (WORLDS) (false-implies-leq? _ _).
%total {} (false-implies-leq? _ _).

%abbrev false-implies-leq : void -> leq M1 M2 -> type = false-implies-leq?.

%abbrev false-implies-nle : void -> nle M1 M2 -> type = false-implies-leq?.


%theorem leq?-respects-eq :
	forall* {M1} {M2} {M1P} {M2P} {B}
	forall {L:leq? M1 M2 B} {E1:eq M1 M1P} {E2:eq M2 M2P}
	exists {LP:leq? M1P M2P B}
	true.

- : leq?-respects-eq L eq/ eq/ L.

%worlds (WORLDS) (leq?-respects-eq _ _ _ _).
%total { } (leq?-respects-eq _ _ _ _).
%reduces L1 = L2 (leq?-respects-eq L1 _ _ L2).

%abbrev leq-respects-eq = leq?-respects-eq.

%abbrev nle-respects-eq = leq?-respects-eq.


%theorem leq/0-inversion :
	forall* {M1} {M2}
	forall {L:leq M1 M2} {E2:eq M2 map/0}
	exists {E1:eq M1 map/0}
	true.

- : leq/0-inversion leq/0 eq/ eq/.

%worlds (WORLDS) (leq/0-inversion _ _ _).
%total { } (leq/0-inversion _ _ _).


%theorem leq/=-inversion :
	forall* {N1} {D1} {M1} {N2} {D2} {M2}
	forall {L:leq (map/+ N1 D1 M1) (map/+ N2 D2 M2)} {EN:nat`eq N1 N2}
	exists {ED:data`leq D1 D2} {EM:leq M1 M2}
	true.

- : leq/=-inversion (leq/= M1<=M2 D1<=D2 nat`eq/) nat`eq/ D1<=D2 M1<=M2.

- : leq/=-inversion (leq/> M311<=M2 N3+1+N=N) nat`eq/ ED M1<=M2
    <- plus-implies-gt N3+1+N=N nat`eq/ N>N
    <- gt-anti-reflexive N>N F
    <- data`false-implies-leq F ED
    <- false-implies-eq F M311=M1
    <- leq-respects-eq M311<=M2 M311=M1 eq/ M1<=M2.

%worlds (WORLDS) (leq/=-inversion _ _ _ _).
%total { } (leq/=-inversion _ _ _ _).
%reduces L1 < L (leq/=-inversion L _ _ L1).


%theorem leq/>-inversion :
	forall* {N1} {D1} {M1} {N2} {D2} {M2} {N3}
	forall {L:leq (map/+ N1 D1 M1) (map/+ N2 D2 M2)} 
               {P:plus (s N3) N2 N1}
	exists {EM:leq (map/+ N3 D1 M1) M2}
	true.

- : leq/>-inversion (leq/= M1<=M2 D1<=D2 nat`eq/) N3+1+N=N M311<=M2
    <- plus-implies-gt N3+1+N=N nat`eq/ N>N
    <- gt-anti-reflexive N>N F
    <- false-implies-eq F M1=M311
    <- leq-respects-eq M1<=M2 M1=M311 eq/ M311<=M2.

- : leq/>-inversion (leq/> M311P<=M2 N3P+1+N2=N1) N3+1+N2=N1 M311<=M2
    <- plus-right-cancels N3P+1+N2=N1 N3+1+N2=N1 nat`eq/ nat`eq/ N3P+1=N3+1
    <- succ-cancels N3P+1=N3+1 N3P=N3
    <- map/+-preserves-eq N3P=N3 data`eq/ eq/ M311P=M311
    <- leq-respects-eq M311P<=M2 M311P=M311 eq/ M311<=M2.

%worlds (WORLDS) (leq/>-inversion _ _ _).
%total { } (leq/>-inversion _ _ _).
%reduces LP < L (leq/>-inversion L _ LP).


%theorem leq-contradiction :
	forall* {N1} {D1} {M1} {N2} {D2} {M2} {N0}
	forall {L:leq (map/+ N1 D1 M1) (map/+ N2 D2 M2)} 
               {P:plus (s N0) N1 N2}
	exists {F:void}
	true.

- : leq-contradiction (leq/= _ _ nat`eq/) N0+1+N=N F
    <- plus-implies-gt N0+1+N=N nat`eq/ N>N
    <- gt-anti-reflexive N>N F.

- : leq-contradiction (leq/> _ N3+1+N2=N1) N0+1+N1=N2 F
    <- nat`plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- nat`plus-implies-gt N0+1+N1=N2 nat`eq/ N2>N1
    <- nat`gt-anti-symmetric N1>N2 N2>N1 F.

%worlds (WORLDS) (leq-contradiction _ _ _).
%total { } (leq-contradiction _ _ _).


%theorem leq-reflexive :
	forall {M}
	exists {L:leq M M}
	true.

- : leq-reflexive map/0 leq/0.

- : leq-reflexive (map/+ N D M) (leq/= M<=M D<=D nat`eq/)
    <- data`leq-reflexive D D<=D
    <- leq-reflexive M M<=M.

%worlds (WORLDS) (leq-reflexive _ _).
%total (M) (leq-reflexive M _).


%theorem leq-anti-symmetric :
	forall* {M1} {M2}
	forall {L1: leq M1 M2} {L2:leq M2 M1}
	exists {E: eq M1 M2}
	true.

- : leq-anti-symmetric leq/0 leq/0 eq/.

- : leq-anti-symmetric (leq/= M1<=M2 D1<=D2 nat`eq/) 
                       (leq/= M2<=M1 D2<=D1 nat`eq/) E
    <- data`leq-anti-symmetric D1<=D2 D2<=D1 D1=D2
    <- leq-anti-symmetric M1<=M2 M2<=M1 M1=M2
    <- map/+-preserves-eq nat`eq/ D1=D2 M1=M2 E.

- : leq-anti-symmetric (leq/= _ _ nat`eq/) (leq/> _ N3+1+N=N) E
    <- nat`plus-implies-gt N3+1+N=N nat`eq/ N>N
    <- nat`gt-anti-reflexive N>N F
    <- false-implies-eq F E.

- : leq-anti-symmetric (leq/> _ N3+1+N=N) (leq/= _ _ nat`eq/) E
    <- nat`plus-implies-gt N3+1+N=N nat`eq/ N>N
    <- nat`gt-anti-reflexive N>N F
    <- false-implies-eq F E.

- : leq-anti-symmetric (leq/> _ N3+1+N2=N1) (leq/> _ N0+1+N1=N2) E
    <- nat`plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- nat`plus-implies-gt N0+1+N1=N2 nat`eq/ N2>N1
    <- nat`gt-anti-symmetric N1>N2 N2>N1 F
    <- false-implies-eq F E.

%worlds (WORLDS) (leq-anti-symmetric _ _ _).
%total (L) (leq-anti-symmetric L _ _).


%theorem leq-transitive :
	forall* {M1} {M2} {M3}
	forall {L1:leq M1 M2} {L2:leq M2 M3}
	exists {L3:leq M1 M3}
	true.

- : leq-transitive leq/0 _ leq/0.

- : leq-transitive (leq/= M1<=M2 D1<=D2 nat`eq/) (leq/= M2<=M3 D2<=D3 nat`eq/)
                   (leq/= M1<=M3 D1<=D3 nat`eq/)
    <- data`leq-transitive D1<=D2 D2<=D3 D1<=D3
    <- leq-transitive M1<=M2 M2<=M3 M1<=M3.

- : leq-transitive (leq/= M1<=M2 D1<=D2 nat`eq/) (leq/> M522<=M3 N5+1+N3=N2)
                   (leq/> M511<=M3 N5+1+N3=N2)
    <- leq-transitive (leq/= M1<=M2 D1<=D2 nat`eq/) M522<=M3 M511<=M3.

- : leq-transitive (leq/> M011<=M2 N0+1+N=N1) (leq/= M2<=M3 D2<=D3 nat`eq/)
                   (leq/> M011<=M3 N0+1+N=N1)
    <- leq-transitive M011<=M2 M2<=M3 M011<=M3.

- : leq-transitive (leq/> M011<=M2 N0+1+N2=N1) (leq/> M522<=M3 N5+1+N3=N2)
                   (leq/> M411<=M3 N4+1+N3=N1)
    <- nat`plus-swap-succ N5+1+N3=N2 N5+N3+1=N2 
    <- nat`plus-associative-converse N5+N3+1=N2 N0+1+N2=N1 N4 N0+1+N5=N4
                                     N4+N3+1=N1
    <- nat`plus-swap-succ-converse N4+N3+1=N1 N4+1+N3=N1
    <- leq-transitive (leq/> M011<=M2 N0+1+N5=N4) M522<=M3 M411<=M3.

%worlds (WORLDS) (leq-transitive _ _ _).
%total (L) (leq-transitive _ L _).


%theorem map/+-preserves-leq? :
	forall* {N1} {N2} {D1} {D2} {M1} {M2} {B}
	forall {E:nat`eq N1 N2} {LD:data`leq D1 D2} {LM:leq? M1 M2 B}
        exists {L:leq? (map/+ N1 D1 M1) (map/+ N2 D2 M2) B}
	true.

- : map/+-preserves-leq? N1=N2 D1<=D2 M1<=M2 (leq/= M1<=M2 D1<=D2 N1=N2).

- : map/+-preserves-leq? nat`eq/ _ (nle/< L1 F2)
	(nle/< (lookup/> L1 P) (fresh/> F2 P))
    <- plus-total P.

%{%
#ifdef DATA_NLE
%}%
- : map/+-preserves-leq? nat`eq/ _ (nle/= L1 L2 DNLE)
	(nle/= (lookup/> L1 P) (lookup/> L2 P) DNLE)
    <- plus-total P.
%{%
#endif
%}%

%worlds (WORLDS) (map/+-preserves-leq? _ _ _ _).
%total { } (map/+-preserves-leq? _ _ _ _).

%abbrev map/+-preserves-leq = map/+-preserves-leq?.

%abbrev map/+-preserves-nle = map/+-preserves-leq?.


%theorem lookup-respects-leq :
	forall* {M} {N} {D} {MP}
	forall {L:lookup M N D} {ME:leq M MP}
        exists {DP} {L:lookup MP N DP} {DE:data`leq D DP}
	true.

- : lookup-respects-leq (lookup/= nat`eq/) (leq/= _ D1<=D2 nat`eq/) 
                         _ (lookup/= nat`eq/) D1<=D2.

- : lookup-respects-leq (lookup/= nat`eq/) (leq/> M311<=M2 N3+1+N2=N1)
                         D2 (lookup/> L13 N3+1+N2=N1) D1<=D2
    <- lookup-respects-leq (lookup/= nat`eq/) M311<=M2 D2 L13 D1<=D2.

- : lookup-respects-leq (lookup/> L13 N3+1+N2=N1) (leq/= M1<=M2 _ nat`eq/)
                        D2 (lookup/> L13P N3+1+N2=N1) D1<=D2
    <- lookup-respects-leq L13 M1<=M2 D2 L13P D1<=D2.

- : lookup-respects-leq (lookup/> L10 N0+1+N1=N) (leq/> M311<=M2 N3+1+N2=N1)
                        D2 (lookup/> L14P N4+1+N2=N) D1<=D2
    <- nat`plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- nat`plus-associative-converse N3+N2+1=N1 N0+1+N1=N 
                                     N4 N0+1+N3=N4 N4+N2+1=N
    <- nat`plus-swap-succ-converse N4+N2+1=N N4+1+N2=N
    <- lookup-respects-leq (lookup/> L10 N0+1+N3=N4) M311<=M2 D2 L14P D1<=D2.

%worlds (WORLDS) (lookup-respects-leq _ _ _ _ _).
%total (L) (lookup-respects-leq _ L _ _ _).


%theorem lookup-implies-unit-leq :
	forall*	{M} {N} {D}
	forall	{L: lookup M N D}
	exists	{L: leq (map/+ N D map/0) M}
	true.

- : lookup-implies-unit-leq (lookup/= nat`eq/) (leq/= leq/0 D<=D nat`eq/)
    <- data`leq-reflexive _ D<=D.

- : lookup-implies-unit-leq (lookup/> LO P) (leq/> LE P)
    <- lookup-implies-unit-leq LO LE.

%worlds (WORLDS) (lookup-implies-unit-leq _ _).
%total (L) (lookup-implies-unit-leq L _).


%theorem fresh-respects-geq :
	forall* {M} {MP} {N}
	forall {FP:fresh MP N} {L:leq M MP}
	exists {F:fresh M N}
	true.

- : fresh-respects-geq F leq/0 fresh/0.

- : fresh-respects-geq (fresh/< R) (leq/= _ _ nat`eq/) (fresh/< R).

- : fresh-respects-geq (fresh/< N2>N) (leq/> _ N3+1+N2=N1) (fresh/< N1>N)
    <- nat`plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- gt-transitive N1>N2 N2>N N1>N.

- : fresh-respects-geq (fresh/> F20 N0+1+N2=N) (leq/= M1<=M2 _ nat`eq/)
                       (fresh/> F10 N0+1+N2=N) 
    <- fresh-respects-geq F20 M1<=M2 F10.

- : {F3110:fresh (map/+ N3 D1 M1) N0}
    {N0+1+N2=N:plus (s N0) N2 N}
    {N3+1+N2=N1:plus (s N3) N2 N1}
    fresh-respects-geq 
       (fresh/> F20 N0+1+N2=N: fresh (map/+ N2 D2 M2) N) 
       (leq/> M311<=M2 N3+1+N2=N1) FP
    <- fresh-respects-geq F20 M311<=M2 F3110
    <- nat`plus-swap-succ N0+1+N2=N N0+N2+1=N
    <- nat`plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-right-preserves-fresh* F3110 N3+N2+1=N1 N0+N2+1=N FP.

%worlds (WORLDS) (fresh-respects-geq _ _ _).
%total (F) (fresh-respects-geq F _ _).


%theorem leq-implies-size-le:
	forall* {M1} {M2} {N1} {N2}
	forall {L:leq M1 M2} {SZ1:size M1 N1} {SZ2:size M2 N2}
	exists {G:ge N2 N1}
	true.

- : leq-implies-size-le leq/0 size/0 N2=|M2| N2>=0
    <- plus-commutative (plus/z:plus z N2 N2) N2+0=N2    
    <- plus-implies-ge N2+0=N2 N2>=0.

- : leq-implies-size-le (leq/= M1<=M2 _ _) (size/+ N1=|M1|) (size/+ N2=|M2|)
                        N2+1>=N1+1
    <- leq-implies-size-le M1<=M2 N1=|M1| N2=|M2| N2>=N1
    <- succ-preserves-ge N2>=N1 N2+1>=N1+1.

- : leq-implies-size-le (leq/> M311<=M2 _) (size/+ N1=|M1|) (size/+ N2=|M2|)
                        (ge/> N2+1>N1+1)
    <- leq-implies-size-le M311<=M2 (size/+ N1=|M1|) N2=|M2| N2>=N1+1
    <- succ-implies-gt nat`eq/ N2+1>N2
    <- gt-transitive-ge N2+1>N2 N2>=N1+1 N2+1>N1+1.

%worlds (WORLDS) (leq-implies-size-le _ _ _ _).
%total (L) (leq-implies-size-le L _ _ _).


%theorem leq-implies-bound-le:
	forall* {M1} {M2} {N1} {N2}
	forall {L:leq M1 M2} {BD1:bound M1 N1} {BD2:bound M2 N2}
	exists {G:ge N2 N1}
	true.

- : leq-implies-bound-le leq/0 bound/0 _ N2>=0
    <- plus-commutative plus/z N2+0=N2    
    <- plus-implies-ge N2+0=N2 N2>=0.

- : leq-implies-bound-le (leq/= M1<=M2 _ nat`eq/) 
                         (bound/+ N+1+N1=N3 DM1<N1) 
                         (bound/+ N+1+N2=N4 DM2<N2)
                         N4>=N3
    <- leq-implies-bound-le M1<=M2 DM1<N1 DM2<N2 N2>=N1
    <- plus-left-preserves-ge* N2>=N1 N+1+N2=N4 N+1+N1=N3 N4>=N3.

- : leq-implies-bound-le (leq/> M311<=M2 N3+1+N2=N1) 
                         (bound/+ N1+1+N10=N11 DM1<N10) 
                         (bound/+ N2+1+N20=N22 DM2<N20)
                         N22>=N11
    <- plus-total N3+1+N10=N13
    <- leq-implies-bound-le M311<=M2 (bound/+ N3+1+N10=N13 DM1<N10) DM2<N20
                            N20>=N13 
    <- plus-swap-succ N1+1+N10=N11 N1+N10+1=N11
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-commutative N3+N2+1=N1 N2+1+N3=N1
    <- plus-swap-succ N3+1+N10=N13 N3+N10+1=N13
    <- plus-associative* N2+1+N3=N1 N1+N10+1=N11 N3+N10+1=N13 N2+1+N13=N11
    <- plus-left-preserves-ge* N20>=N13 N2+1+N20=N22 N2+1+N13=N11 N22>=N11.

%worlds (WORLDS) (leq-implies-bound-le _ _ _ _).
%total (L) (leq-implies-bound-le L _ _ _).


%theorem shift-left-preserves-leq*:
	forall* {M1} {M2} {N} {SM1} {D}
	forall {L:leq M1 M2}
	       {S1:shift N M1 SM1}
	exists {SL:leq SM1 (map/+ N D M2)}
	true.

- : shift-left-preserves-leq* _ shift/0 leq/0.

- : shift-left-preserves-leq* M111<=M2 (shift/+ N+1+N1=N1P) 
                              (leq/> M111<=M2 N1+1+N=N1P)
    <- plus-swap-succ N+1+N1=N1P N+N1+1=N1P
    <- plus-commutative N+N1+1=N1P N1+1+N=N1P.

%worlds (WORLDS) (shift-left-preserves-leq* _ _ _).
%total { } (shift-left-preserves-leq* _ _ _).


%theorem shift-preserves-leq*:
	forall* {M1} {M2} {N} {SM1} {SM2} 
	forall {L:leq M1 M2}
               {S1:shift N M1 SM1}
	       {S1:shift N M2 SM2}
	exists {SL:leq SM1 SM2}
	true.

- : shift-preserves-leq* _ shift/0 _ leq/0.

- : shift-preserves-leq* (leq/= M1<=M2 D1<=D2 nat`eq/)
                         (shift/+ N+1+N1=N1P) 
                         (shift/+ N+1+N1=N2P)
                         (leq/= M1<=M2 D1<=D2 N1P=N2P)
    <- plus-deterministic N+1+N1=N1P N+1+N1=N2P nat`eq/ nat`eq/ N1P=N2P.

- : shift-preserves-leq* (leq/> M311<=M2 N3+1+N2=N1)
                         (shift/+ N+1+N1=N1P) 
                         (shift/+ N+1+N2=N2P)
                         (leq/> M311<=M2 N3+1+N2P=N1P)
    <- plus-commutative N3+1+N2=N1 N2+N3+1=N1
    <- plus-associative-converse* N2+N3+1=N1 N+1+N1=N1P N+1+N2=N2P N2P+N3+1=N1P
    <- plus-commutative N2P+N3+1=N1P N3+1+N2P=N1P.

%worlds (WORLDS) (shift-preserves-leq* _ _ _ _).
%total { } (shift-preserves-leq* _ _ _ _).

%abbrev shift-preserves-leq = shift-preserves-leq*.

%theorem shift-preserves-leq-converse:
	forall* {M1} {M2} {N} {SM1} {SM2} 
	forall {L:leq SM1 SM2}
               {S1:shift N M1 SM1}
	       {S1:shift N M2 SM2}
	exists {SL:leq M1 M2}
	true.

- : shift-preserves-leq-converse _ shift/0 _ leq/0.

- : shift-preserves-leq-converse (leq/= M1<=M2 D1<=D2 nat`eq/)
     				 (shift/+ N+1+N1P=N1) 
                         	 (shift/+ N+1+N2P=N1)
                         	 (leq/= M1<=M2 D1<=D2 N1P=N2P)
    <- plus-left-cancels N+1+N1P=N1 N+1+N2P=N1 nat`eq/ nat`eq/ N1P=N2P.

- : shift-preserves-leq-converse (leq/> M311<=M2 N3+1+N2P=N1P)
                         	 (shift/+ N+1+N1=N1P) 
                        	 (shift/+ N+1+N2=N2P)
                        	 (leq/> M311<=M2 N3+1+N2=N1)
    <- plus-commutative N3+1+N2P=N1P N2P+N3+1=N1P
    <- plus-associative N+1+N2=N2P N2P+N3+1=N1P M1 N2+N3+1=M1 N+1+M1=N1P
    <- plus-left-cancels N+1+M1=N1P N+1+N1=N1P nat`eq/ nat`eq/ M1=N1
    <- plus-respects-eq N2+N3+1=M1 nat`eq/ nat`eq/ M1=N1 N2+N3+1=N1
    <- plus-commutative N2+N3+1=N1 N3+1+N2=N1.

%worlds (WORLDS) (shift-preserves-leq-converse _ _ _ _).
%total { } (shift-preserves-leq-converse _ _ _ _).


%theorem disjoint-respects-geq* :
	forall* {M1} {M2} {M1P}
	forall {A:disjoint M1 M2} {E1:leq M1P M1}
	exists {AP:disjoint M1P M2}
	true.

- : disjoint-respects-geq* _ leq/0 disjoint/L.
	
- : disjoint-respects-geq* disjoint/R _ disjoint/R.

- : disjoint-respects-geq* 
	(disjoint/< D1 P) (leq/= L _ nat`eq/)
	(disjoint/< D1P P)
    <- disjoint-respects-geq* D1 L D1P.

- : disjoint-respects-geq*
	(disjoint/> D1 P) (leq/= L DL nat`eq/)
	(disjoint/> D1P P)
    <- disjoint-respects-geq* D1 (leq/= L DL nat`eq/) D1P.

- : disjoint-respects-geq*
	(disjoint/< D1 P1) (leq/> L P2) DP
    <- disjoint-respects-geq* D1 L D1P
    <- plus-swap-succ P1 P1S
    <- plus-swap-succ P2 P2S
    <- plus-commutative P1S P1SC
    <- plus-commutative P2S P2SC
    <- shift-preserves-disjoint D1P (shift/+ P2SC) (shift/+ P1SC) DP.

- : disjoint-respects-geq*
	(disjoint/> D1 N0+1+N1=N2) (leq/> L N3+1+N2=N4) DP
    <- plus-swap-succ N0+1+N1=N2 N0+N1+1=N2
    <- plus-associative-converse N0+N1+1=N2 N3+1+N2=N4 N5 N3+1+N0=N5 N5+N1+1=N4
    <- disjoint-respects-geq* D1 (leq/> L N3+1+N0=N5) D1P
    <- plus-commutative N5+N1+1=N4 N1+1+N5=N4
    <- shift-left-preserves-disjoint D1P (shift/+ N1+1+N5=N4) DP.

%worlds (WORLDS) (disjoint-respects-geq* _ _ _).
%total (D) (disjoint-respects-geq* D _ _).


%theorem disjoint-respects-geq :
	forall* {M1} {M2} {M1P} {M2P}
	forall {A:disjoint M1 M2} {E1:leq M1P M1} {E2:leq M2P M2} 
	exists {AP:disjoint M1P M2P}
	true.

- : disjoint-respects-geq M1^M2 M1P<=M1 M2P<=M2 M1P^M2P
    <- disjoint-respects-geq* M1^M2 M1P<=M1 M1P^M2
    <- disjoint-symmetric M1P^M2 M2^M1P
    <- disjoint-respects-geq* M2^M1P M2P<=M2 M2P^M1P
    <- disjoint-symmetric M2P^M1P M1P^M2P.

%worlds (WORLDS) (disjoint-respects-geq _ _ _ _).
%total { } (disjoint-respects-geq _ _ _ _).


%theorem update-left-preserves-leq*:
	forall* {M1} {M2} {N} {D} {M1P} {M2P}
	forall {L:leq M1 M2} 
               {U1:update M1 N D M1P}
	       {U2:update M2 N D M2P}
	exists {LP:leq M1P M2P}
	true.

- : update-left-preserves-leq* leq/0 update/0 update/0 (leq/= leq/0 D<=D nat`eq/)
    <- data`leq-reflexive _ D<=D.

- : update-left-preserves-leq* leq/0 update/0 (update/= nat`eq/) 
                          (leq/= leq/0 D<=D nat`eq/)
    <- data`leq-reflexive _ D<=D.

- : update-left-preserves-leq* leq/0 update/0 (update/< _)
                          (leq/= leq/0 D<=D nat`eq/)
    <- data`leq-reflexive _ D<=D.

- : update-left-preserves-leq* leq/0 update/0 (update/> U2505 N5+1+N2=N)
                          (leq/> M500<=M5 N5+1+N2=N)
    <- update-left-preserves-leq* leq/0 update/0 U2505 M500<=M5.

- : update-left-preserves-leq* (leq/= M1<=M2 D1<=D2 nat`eq/)
                          (update/= nat`eq/) 
                          (U2:update (map/+ N D2 M2) N D M)
                          M001<=M
    <- update/=-inversion U2 nat`eq/ M002=M
    <- data`leq-reflexive _ D<=D
    <- leq-respects-eq (leq/= M1<=M2 D<=D nat`eq/) eq/ M002=M M001<=M.

- : update-left-preserves-leq* (leq/= M1<=M2 D1<=D2 nat`eq/)
                          (update/< N3+1+N=N1)
                          (U2:update (map/+ N1 D2 M2) N D M)
                          M00M311<=M
    <- update/<-inversion U2 N3+1+N=N1 M00M322=M
    <- data`leq-reflexive _ D<=D
    <- leq-respects-eq (leq/= (leq/= M1<=M2 D1<=D2 nat`eq/) D<=D nat`eq/) eq/ 
                       M00M322=M M00M311<=M.

- : update-left-preserves-leq* (leq/= M1<=M2 D1<=D2 nat`eq/)
                          (update/> U1303 N3+1+N1=N)
                          (U2:update (map/+ N1 D2 M2) N D M)
                          M113<=M
    <- update/>-inversion U2 N3+1+N1=N M4 U2304 M124=M
    <- update-left-preserves-leq* M1<=M2 U1303 U2304 M3<=M4
    <- leq-respects-eq (leq/= M3<=M4 D1<=D2 nat`eq/) eq/ M124=M M113<=M.

- : update-left-preserves-leq* (leq/> M311<=M2 N3+1+N2=N1)
                          (update/= nat`eq/)
			  (U2:update (map/+ N2 D2 M2) N1 D M)
                          M101<=M
    <- update/>-inversion U2 N3+1+N2=N1 M4 U2304 M224=M
    <- update-left-preserves-leq* M311<=M2 (update/= nat`eq/) U2304 M301<=M4
    <- leq-respects-eq (leq/> M301<=M4 N3+1+N2=N1) eq/ M224=M M101<=M.

 - : update-left-preserves-leq* (leq/> M311<=M2 N3+1+N=N1)
                           (update/< N4+1+N=N1)   
                           (update/= nat`eq/) %% hence N=N2
                           (leq/= M411<=M2 D<=D nat`eq/)
     <- nat`plus-right-cancels N3+1+N=N1 N4+1+N=N1 nat`eq/ nat`eq/ N3+1=N4+1
     <- nat`succ-cancels N3+1=N4+1 N3=N4
     <- map/+-preserves-eq N3=N4 data`eq/ eq/ M311=M411
     <- leq-respects-eq M311<=M2 M311=M411 eq/ M411<=M2
     <- data`leq-reflexive _ D<=D.

 - : update-left-preserves-leq* (leq/> M311<=M2 N3+1+N2=N1)
                           (update/< N4+1+N=N1)
                           (update/< N5+1+N=N2)
                           (leq/= (leq/> M311<=M2 N3+1+N5=N4) D<=D nat`eq/)
     <- nat`plus-swap-succ N5+1+N=N2 N5+N+1=N2
     <- nat`plus-associative-converse N5+N+1=N2 N3+1+N2=N1 
                                      N4P N3+1+N5=N4P N4P+N+1=N1
     <- nat`plus-swap-succ N4+1+N=N1 N4+N+1=N1
     <- nat`plus-right-cancels N4P+N+1=N1 N4+N+1=N1 nat`eq/ nat`eq/ N4P=N4
     <- nat`plus-respects-eq N3+1+N5=N4P nat`eq/ nat`eq/ N4P=N4 N3+1+N5=N4
     <- data`leq-reflexive _ D<=D.

 - : update-left-preserves-leq* (leq/> M311<=M2 N3+1+N2=N1)
                           (update/< N4+1+N=N1)   
                           (update/> U2505 N5+1+N2=N)
                           (leq/> M50M411<=M5 N5+1+N2=N)
     <- nat`plus-swap-succ N5+1+N2=N N5+N2+1=N
     <- nat`plus-associative-converse N5+N2+1=N N4+1+N=N1
                                      N3P N4+1+N5=N3P N3P+N2+1=N1
     <- nat`plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
     <- nat`plus-right-cancels N3P+N2+1=N1 N3+N2+1=N1 nat`eq/ nat`eq/ N3P=N3
     <- nat`plus-respects-eq N4+1+N5=N3P nat`eq/ nat`eq/ N3P=N3 N4+1+N5=N3
     <- update-left-preserves-leq* M311<=M2 (update/< N4+1+N5=N3) U2505 
                              M50M411<=M5.

- : update-left-preserves-leq* (leq/> M311<=M2 N3+1+N2=N1)
                          (update/> U1404 N4+1+N1=N)
                          (U2:update (map/+ N2 D2 M2) N D M)
                          M114<=M
    <- nat`plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- nat`plus-associative-converse N3+N2+1=N1 N4+1+N1=N 
                                     N5 N4+1+N3=N5 N5+N2+1=N
    <- nat`plus-swap-succ-converse N5+N2+1=N N5+1+N2=N
    <- update/>-inversion U2 N5+1+N2=N M5 U2505 M225=M
    <- update-left-preserves-leq* M311<=M2 (update/> U1404 N4+1+N3=N5) U2505
                             M314<=M5
    <- leq-respects-eq (leq/> M314<=M5 N3+1+N2=N1) eq/ M225=M M114<=M.

%worlds (WORLDS) (update-left-preserves-leq* _ _ _ _).
%total (U) (update-left-preserves-leq* _ _ U _).


%theorem update-right-preserves-leq*:
	forall* {M} {N} {D1} {D2} {M1P} {M2P}
	forall {L:data`leq D1 D2} 
               {U1:update M N D1 M1P}
	       {U2:update M N D2 M2P}
	exists {LP:leq M1P M2P}
	true.

- : update-right-preserves-leq* D1<=D2 update/0 update/0 
                                (leq/= leq/0 D1<=D2 nat`eq/).

- : update-right-preserves-leq* D1<=D2 (update/= nat`eq/) U2 L
    <- update/=-inversion U2 nat`eq/ M221=M2P
    <- leq-reflexive _ M1<=M1
    <- leq-respects-eq (leq/= M1<=M1 D1<=D2 nat`eq/) eq/ M221=M2P L.

- : update-right-preserves-leq* D1<=D2 (update/< P) U2 L
    <- update/<-inversion U2 P M22311=M2P
    <- leq-reflexive _ M311<=M311
    <- leq-respects-eq (leq/= M311<=M311 D1<=D2 nat`eq/) eq/ M22311=M2P L.

- : update-right-preserves-leq* D1<=D2 (update/> U1 P) U22 L
    <- update/>-inversion U22 P M2P U2 M112=M
    <- update-right-preserves-leq* D1<=D2 U1 U2 M1P<=M2P
    <- data`leq-reflexive _ D<=D
    <- leq-respects-eq (leq/= M1P<=M2P D<=D nat`eq/) eq/ M112=M L.

%worlds (WORLDS) (update-right-preserves-leq* _ _ _ _).
%total (U) (update-right-preserves-leq* _ U _ _).


%theorem update-preserves-leq* :
	forall* {M1} {M2} {N} {D1} {D2} {M1P} {M2P}
	forall {L:leq M1 M2} {L:data`leq D1 D2} 
               {U1:update M1 N D1 M1P}
	       {U2:update M2 N D2 M2P}
	exists {LP:leq M1P M2P}
	true.

- : update-preserves-leq* M1<=M2 D1<=D2 M1^N=D1->M1P M2^N=D2->M2P M1P<=M2P
    <- update-total M2^N=D1->MM
    <- update-left-preserves-leq* M1<=M2 M1^N=D1->M1P M2^N=D1->MM M1P<=MM
    <- update-right-preserves-leq* D1<=D2 M2^N=D1->MM M2^N=D2->M2P MM<=M2P
    <- leq-transitive M1P<=MM MM<=M2P M1P<=M2P.

%worlds (WORLDS) (update-preserves-leq* _ _ _ _ _).
%total { } (update-preserves-leq* _ _ _ _ _).


%theorem fresh-update-implies-leq :
	forall* {M1} {N} {D} {M2}
	forall {F:fresh M1 N} {U:update M1 N D M2}
	exists {L:leq M1 M2}
	true.

- : fresh-update-implies-leq fresh/0 U leq/0.

- : fresh-update-implies-leq (fresh/< N2<N1) U L
    <- gt-implies-plus N2<N1 _ N3+1+N2=N1
    <- update/<-inversion U N3+1+N2=N1 M22311=M2
    <- leq-reflexive _ M311<=M311
    <- leq-respects-eq (leq/> M311<=M311 N3+1+N2=N1) eq/ M22311=M2 L.

- : fresh-update-implies-leq (fresh/> F1 N0+1+N1=N2) U L
    <- update/>-inversion U N0+1+N1=N2 _ U1 M112=M
    <- fresh-update-implies-leq F1 U1 L1
    <- data`leq-reflexive _ DL
    <- leq-respects-eq (leq/= L1 DL nat`eq/) eq/ M112=M L.

%worlds (WORLDS) (fresh-update-implies-leq _ _ _).
%total (F) (fresh-update-implies-leq F _ _).


%theorem lookup-update-preserves-leq :
	forall* {M1} {N} {D1} {D2} {M2}
	forall {L:lookup M1 N D1} {U:update M1 N D2 M2}
               {L:data`leq D1 D2}
	exists {L:leq M1 M2}
	true.

- : lookup-update-preserves-leq (lookup/= nat`eq/) U D1<=D2 L
    <- update/=-inversion U nat`eq/ M221=M2
    <- leq-reflexive _ M1<=M1
    <- leq-respects-eq (leq/= M1<=M1 D1<=D2 nat`eq/) eq/ M221=M2 L.

- : lookup-update-preserves-leq (lookup/> L1 N0+1+N1=N2) U D1<=D2 L
    <- update/>-inversion U N0+1+N1=N2 M2 U1 M112=M
    <- lookup-update-preserves-leq L1 U1 D1<=D2 L1P
    <- data`leq-reflexive _ D1<=D1
    <- leq-respects-eq (leq/= L1P D1<=D1 nat`eq/) eq/ M112=M L.

%worlds (WORLDS) (lookup-update-preserves-leq _ _ _ _).
%total (L) (lookup-update-preserves-leq L _ _ _).



%%% Theorems about nle


%theorem nle-anti-reflexive :
	forall* {M}
	forall {N:nle M M}
	exists {F:void}
	true.

- : nle-anti-reflexive (nle/< L F) FALSE
    <- fresh-lookup-not-equal F L N<>N
    <- nat`eq-ne-implies-false nat`eq/ N<>N FALSE.

%{%
#ifdef DATA_NLE
%}%
- : nle-anti-reflexive (nle/= L1 L2 DNLE) FALSE
    <- lookup-deterministic L1 L2 eq/ nat`eq/ D1=D2
    <- data`nle-implies-ne DNLE DNE
    <- data`eq-ne-implies-false D1=D2 DNE FALSE.
%{%
#endif
%}%

%worlds (WORLDS) (nle-anti-reflexive _ _).
%total { } (nle-anti-reflexive _ _).


%theorem nle-implies-ne :
	forall* {M1} {M2}
	forall {N1:nle M1 M2}
	exists {N2:ne M1 M2}
	true.

- : nle-implies-ne (nle/< L F) (ne/< L F).

%{%
#ifdef DATA_NLE
%}%
- : nle-implies-ne (nle/= L1 L2 DNLE) (ne/= L1 L2 DNE)
    <- data`nle-implies-ne DNLE DNE.
%{%
#endif
%}%

%worlds (WORLDS) (nle-implies-ne _ _).
%total (N) (nle-implies-ne N _).


%theorem leq-nle-contradiction :
	forall* {M1} {M2}
	forall {L:leq M1 M2} {N1:nle M1 M2}
	exists {F:void}
	true.

- : leq-nle-contradiction M1<=M2 (nle/< L1 F2) FALSE
    <- lookup-respects-leq L1 M1<=M2 _ L2 _
    <- fresh-lookup-not-equal F2 L2 N<>N
    <- nat`eq-ne-implies-false nat`eq/ N<>N FALSE.

%{%
#ifdef DATA_NLE
%}%
- : leq-nle-contradiction M1<=M2 (nle/= L1 L2 D1</=D2) F
    <- lookup-respects-leq L1 M1<=M2 _ L3 D1<=D3
    <- lookup-deterministic L3 L2 eq/ nat`eq/ D3=D2
    <- data`leq-respects-eq D1<=D3 data`eq/ D3=D2 D1<=D2
    <- data`leq-nle-contradiction D1<=D2 D1</=D2 F.
%{%
#endif
%}%

%worlds (WORLDS) (leq-nle-contradiction _ _ _).
%total { } (leq-nle-contradiction _ _ _).


%{%
#ifdef DATA_NLE
%}%

%%% Totality leq?


%theorem leq?-total* :
	forall {M1} {M2}
	exists {B} {L?:leq? M1 M2 B}
	true.

%abbrev leq?-total = leq?-total* _ _ _.

%theorem leq?-total/+ :
	forall* {N1} {D1} {N2} {D2} {M1} {CN} {BD}
	forall	{M2}
		{CMP:nat`compare N1 N2 CN}
	       	{D?:data`leq? D1 D2 BD}
	exists	{B} 
		{L:leq? (map/+ N1 D1 M1) (map/+ N2 D2 M2) B}
	true.

- : leq?-total (leq?/yes leq/0).

- : leq?-total (leq?/no (nle/< (lookup/= nat`eq/) fresh/0)).

- : leq?-total L?
    <- nat`compare-total CMP
    <- data`leq?-total D?
    <- leq?-total/+ _ CMP D? _ L?.

- : leq?-total/+ _ (nat`compare/=) (data`leq?/yes DL) _ LL?
    <- leq?-total L?
    <- map/+-preserves-leq? nat`eq/ DL L? LL?.

- : leq?-total/+ _ (nat`compare/=) (data`leq?/no ND) _
                 (leq?/no (nle/= (lookup/= nat`eq/) (lookup/= nat`eq/) ND)).

- : leq?-total/+ _ (nat`compare/< N1<N2) _ _
		 (leq?/no (nle/< (lookup/= nat`eq/) (fresh/< N1<N2))).

%theorem leq?-total/> :
        forall* {N1} {N2} {N3} {D1} {D2} {M1} {M2} {B}
        forall	{L?:leq? (map/+ N3 D1 M1) M2 B}
               	{P:plus (s N3) N2 N1}
        exists	{LL?:leq? (map/+ N1 D1 M1) (map/+ N2 D2 M2) B}
        true.

- : leq?-total/> (leq?/yes L) P (leq?/yes (leq/> L P)).

- : leq?-total/> (leq?/no (nle/= L3 L2P DNLE)) N3+1+N2=N1
		 (leq?/no (nle/= L1 (lookup/> L2P N4+1+N2=N5) DNLE))
    <- plus-total N4+1+N2=N5
    <- plus-swap-succ N4+1+N2=N5 N4+N2+1=N5
    <- plus-commutative N4+N2+1=N5 N2+1+N4=N5
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-commutative N3+N2+1=N1 N2+1+N3=N1
    <- shift-preserves-lookup* L3 (shift/+ N2+1+N3=N1) N2+1+N4=N5 L1.

- : leq?-total/> (leq?/no (nle/< L1 F2)) P
		 (leq?/no (nle/< L1P (fresh/> F2 PP)))
    <- plus-swap-succ P Ps
    <- plus-commutative Ps Psc
    <- plus-total PP
    <- plus-swap-succ PP PPs
    <- plus-commutative PPs PPsc
    <- shift-preserves-lookup* L1 (shift/+ Psc) PPsc L1P.

%worlds (WORLDS) (leq?-total/> _ _ _).
%total { } (leq?-total/> _ _ _).

- : leq?-total/+ _ (nat`compare/> N1>N2) _ _ LL?
    <- gt-implies-plus N1>N2 _ N3+1+N2=N1
    <- leq?-total L?
    <- leq?-total/> L? N3+1+N2=N1 LL?.

%worlds (WORLDS)   (leq?-total* _ _ _ _) (leq?-total/+ _ _ _ _ _).
%total (L M) (leq?-total* _ L _ _) (leq?-total/+ M _ _ _ _).

%{%
#endif
%}%
