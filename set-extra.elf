%%%%% set-extra.elf
%%%%% Extra theorems about sets not derived from map.
%%%%% This file is part of the set.elf signature



%%%% Theorems


%theorem eq?-total* :
        forall {M} {N}
        exists {B} {T:eq? M N B}
        true.

%abbrev eq?-total = eq?-total* _ _ _.

%theorem eq?-total/+ :
	forall* {N1} {N2} {M2} {CMP} {EM}
	forall {M1} 
	       {CN: nat`compare N1 N2 CMP}
	       {EM?:eq? M1 M2 EM}
	exists {B}
	       {E?:eq? (set/+ N1 M1) (set/+ N2 M2) B}
	true.

- : eq?-total eq?/yes.

- : eq?-total (ne/< (lookup/= nat`eq/) not-member/0).

- : eq?-total (ne/> not-member/0 (lookup/= nat`eq/)).

- : eq?-total E?
    <- nat`compare-total EC
    <- eq?-total EM?
    <- eq?-total/+ _ EC EM? _ E?.

- : eq?-total/+ _ (nat`compare/=) EQ? _ EQP?
    <- map/+-preserves-eq? nat`eq/ unit`eq/ EQ? EQP?.

- : eq?-total/+ _ (nat`compare/< N2>N1) _ _
	(ne/< (lookup/= nat`eq/) (not-member/< N2>N1)).

- : eq?-total/+ _ (nat`compare/> N1>N2) _ _ 
	(ne/> (not-member/< N1>N2) (lookup/= nat`eq/) ).

%worlds ()   (eq?-total* _ _ _ _) (eq?-total/+ _ _ _ _ _).
%total (M W) (eq?-total* M _ _ _) (eq?-total/+ W _ _ _ _).


%theorem leq?-total* :
	forall {M1} {M2}
	exists {B} {L?:leq? M1 M2 B}
	true.

%abbrev leq?-total = leq?-total* _ _ _.

%theorem leq?-total/+ :
	forall* {N1} {N2} {M1} {CN}
	forall	{M2}
		{CMP:nat`compare N1 N2 CN}
	exists	{B} 
		{L:leq? (set/+ N1 M1) (set/+ N2 M2) B}
	true.

- : leq?-total (leq?/yes leq/0).

- : leq?-total (leq?/no (nle/< (lookup/= nat`eq/) not-member/0)).

- : leq?-total L?
    <- nat`compare-total CMP
    <- leq?-total/+ _ CMP _ L?.

- : leq?-total/+ _ (nat`compare/=) _ LL?
    <- leq?-total L?
    <- map/+-preserves-leq? nat`eq/ unit`eq/ L? LL?.

- : leq?-total/+ _ (nat`compare/< N1<N2) _
		 (leq?/no (nle/< (lookup/= nat`eq/) (not-member/< N1<N2))).

%theorem leq?-total/> :
        forall* {N1} {N2} {N3} {D1} {D2} {M1} {M2} {B}
        forall	{L?:leq? (map/+ N3 D1 M1) M2 B}
               	{P:plus (s N3) N2 N1}
        exists	{LL?:leq? (map/+ N1 D1 M1) (map/+ N2 D2 M2) B}
        true.

- : leq?-total/> (leq?/yes L) P (leq?/yes (leq/> L P)).

- : leq?-total/> (leq?/no (nle/< L1 F2)) P
		 (leq?/no (nle/< L1P (not-member/> F2 PP)))
    <- plus-swap-succ P Ps
    <- plus-commutative Ps Psc
    <- plus-total PP
    <- plus-swap-succ PP PPs
    <- plus-commutative PPs PPsc
    <- shift-preserves-lookup* L1 (shift/+ Psc) PPsc L1P.

%worlds () (leq?-total/> _ _ _).
%total { } (leq?-total/> _ _ _).

- : leq?-total/+ _ (nat`compare/> N1>N2) _ LL?
    <- gt-implies-plus N1>N2 _ N3+1+N2=N1
    <- leq?-total L?
    <- leq?-total/> L? N3+1+N2=N1 LL?.

%worlds ()   (leq?-total* _ _ _ _) (leq?-total/+ _ _ _ _).
%total (L M) (leq?-total* _ L _ _) (leq?-total/+ M _ _ _).


%theorem member-not-member-contradiction :
	forall* {S} {N}
	forall	{M: lookup S N unit/}
		{NM: not-member S N}
	exists	{F: void}
	true.

- : member-not-member-contradiction M NM F
    <- not-member-lookup-not-equal NM M N<>N
    <- nat`ne-anti-reflexive N<>N F.

%worlds () (member-not-member-contradiction _ _ _).
%total { } (member-not-member-contradiction _ _ _).


%theorem add-preserves-member :
	forall* {S} {N1} {N2} {SP}
	forall	{SM: lookup S N1 unit/}
		{SA: update S N2 unit/ SP}
	exists	{SMP: lookup SP N1 unit/}
	true.

%theorem add-preserves-member/L :
	forall* {S} {N1} {N2} {SP} {B}
	forall	{SM: lookup S N1 unit/}
		{SA: update S N2 unit/ SP}
		{EQ?: nat`eq? N1 N2 B}
	exists	{SMP: lookup SP N1 unit/}
	true.

- : add-preserves-member/L SM SA (nat`eq?/no NE) SMP
    <- update-preserves-lookup SM SA NE SMP.

- : add-preserves-member/L _ SA (nat`eq?/yes) SMP
    <- update-implies-lookup SA SMP.

%worlds () (add-preserves-member/L _ _ _ _).
%total { } (add-preserves-member/L _ _ _ _).

- : add-preserves-member SM SA SMP
    <- nat`eq?-total EQ?
    <- add-preserves-member/L SM SA EQ? SMP.

%worlds () (add-preserves-member _ _ _).
%total { } (add-preserves-member _ _ _).


%theorem union-right-distributes-over-intersection :
	forall* {S1} {S2} {S3} {S4} {S7}
        forall {I12:intersection S1 S2 S3} {U34:union S3 S4 S7}
        exists {S5} {S6} {U14:union S1 S4 S5} {U24:union S2 S4 S6}
               {I56:intersection S5 S6 S7}
	true.

- : union-right-distributes-over-intersection S1*S2=S3 S3+S4=S7 S5 S6
                                              S1+S4=S5 S2+S4=S6 S5*S6=S7
    <- union-total S1+S4=S5
    <- union-total S2+S4=S6
    <- intersection-total S5*S6=S7P
    <- union-implies-leq S2+S4=S6 _ S4<=S6
    <- leq-implies-intersection S4<=S6 S4*S6=S4
    <- intersection-total S1*S6=S8
    <- intersection-total S1*S4=S9
    <- intersection-right-distributes-over-union* S1+S4=S5 S5*S6=S7P
                                                  S1*S6=S8 S4*S6=S4 S8+S4=S7P
    <- intersection-left-distributes-over-union* S2+S4=S6 S1*S6=S8
                                                 S1*S2=S3 S1*S4=S9 S3+S9=S8
    <- intersection-implies-leq S1*S4=S9 _ S9<=S4
    <- leq-implies-union S9<=S4 S9+S4=S4
    <- union-associative* S3+S9=S8 S8+S4=S7P S9+S4=S4 S3+S4=S7P
    <- union-deterministic S3+S4=S7P S3+S4=S7 eq/ eq/ S7P=S7 
    <- intersection-respects-eq S5*S6=S7P eq/ eq/ S7P=S7 S5*S6=S7.

%worlds () (union-right-distributes-over-intersection _ _ _ _ _ _ _).
%total { } (union-right-distributes-over-intersection _ _ _ _ _ _ _).

%{%
#define MUL_COMMUTATIVE 1
#define ADD_TOTAL 1
#define ADD(X,Y) X*Y
#define ADDN intersection
#define MUL(X,Y) X+Y
#define MULN union
#define EQ eq
BEGIN_ELF
#include "distrib.i"
END_ELF
#undef EQ
#undef ADD
#undef ADDN
#undef MUL
#undef MULN
#undef ADD_TOTAL
#undef MUL_COMMUTATIVE
%}%


% a useful way to break down a union:

%theorem leq-union-implies-leq-intersection-union :
	forall*	{A} {B} {C} {D} {E} {F}
	forall	{L: leq A D}
		{U: union B C D}
		{I: intersection A B E}
		{V: union E C F}
	exists	{M: leq A F}
	true.

- : leq-union-implies-leq-intersection-union
	A<=D BUC=D A^B=E EUC=F A<=F
    <- leq-implies-intersection A<=D A^D=A
    <- intersection-total* A C G A^C=G
    <- intersection-left-distributes-over-union* BUC=D A^D=A A^B=E A^C=G EUG=A
    <- intersection-implies-leq A^C=G G<=A G<=C
    <- union-left-preserves-leq* G<=C EUG=A EUC=F A<=F.

%worlds () (leq-union-implies-leq-intersection-union _ _ _ _ _).
%total { } (leq-union-implies-leq-intersection-union _ _ _ _ _).


%theorem leq-union-disjoint-implies-leq :
	forall*	{A} {B} {C} {D}
	forall	{L: leq A D}
		{U: union B C D}
		{X: disjoint A B}
	exists	{M: leq A C}
	true.

- : leq-union-disjoint-implies-leq A<=D BUC=D A^B A<=C
    <- disjoint-intersection-empty A^B A^B=0
    <- leq-union-implies-leq-intersection-union A<=D BUC=D A^B=0 union/L A<=C.

%worlds () (leq-union-disjoint-implies-leq _ _ _ _).
%total { } (leq-union-disjoint-implies-leq _ _ _ _).


% not true for general maps.
%theorem leq-size-eq-implies-eq :
        forall* {S1} {S2} {Z1} {Z2}
        forall  {L: leq S1 S2}
                {SZ1: size S1 Z1}
                {SZ2: size S2 Z2}
                {EQZ: nat`eq Z1 Z2}
        exists  {EQS: eq S1 S2}
        true.

%theorem leq-size-eq-implies-eq/L :
        forall* {S1} {S2} {Z} {B}
        forall  {L: leq S1 S2}
                {SZ1: size S1 Z}
                {SZ2: size S2 Z}
                {LE?: leq? S2 S1 B}
        exists  {EQS: eq S1 S2}
        true.

- : leq-size-eq-implies-eq/L S1<=S2 _ _ S2<=S1 S1=S2
    <- leq-anti-symmetric S1<=S2 S2<=S1 S1=S2.

- : leq-size-eq-implies-eq/L S1<=S2 SS1 SS2 (nle/< M2 NM1) EQ
    <- member-implies-not-member-add M2 S3 NM3 S3+X=S2
    <- size-total SS3
    <- not-member-add-increases-size SS3 NM3 S3+X=S2 SS2P
    <- size-unique SS2 SS2P eq/ Z=Z3+1
    <- not-member-update-implies-unit-union NM3 S3+X=S2 S3UX=S2
    <- union-commutative S3UX=S2 XUS3=S2
    <- not-member-implies-unit-disjoint NM1 S1^X
    <- leq-union-disjoint-implies-leq S1<=S2 XUS3=S2 S1^X S1<=S3
    <- leq-implies-size-le S1<=S3 SS1 SS3 Z3>=Z
    <- nat`ge-respects-eq Z3>=Z nat`eq/ Z=Z3+1 Z3>=Z3+1
    <- ge-succ-implies-gt Z3>=Z3+1 Z3>Z3
    <- gt-anti-reflexive Z3>Z3 F
    <- false-implies-eq F EQ.

%worlds () (leq-size-eq-implies-eq/L _ _ _ _ _).
%total { } (leq-size-eq-implies-eq/L _ _ _ _ _).

- : leq-size-eq-implies-eq L SZ1 SZ2 nat`eq/ EQ
    <- leq?-total LEQ?
    <- leq-size-eq-implies-eq/L L SZ1 SZ2 LEQ? EQ.

%worlds () (leq-size-eq-implies-eq _ _ _ _ _).
%total { } (leq-size-eq-implies-eq _ _ _ _ _).



%%% set membership w.r.t. union:


%theorem add-implies-unit-union :
	forall*	{S1} {X} {S2}
	forall	{A: add S1 X S2}
	exists	{U: union S1 (set/1 X) S2}
	true.

%theorem add-implies-unit-union/L :
	forall*	{S1} {X} {S2} {B}
	forall	{A: add S1 X S2}
		{M?: member? S1 X B}
	exists	{U: union S1 (set/1 X) S2}
	true.

- : add-implies-unit-union/L A (member?/in S1->X) S1UX=S2
    <- member-implies-unit-leq S1->X X<=S1
    <- add-member-has-no-effect S1->X A S1=S2
    <- leq-implies-union X<=S1 XUS1=S1
    <- union-commutative XUS1=S1 S1UX=S1
    <- union-respects-eq S1UX=S1 eq/ eq/ S1=S2 S1UX=S2.

- : add-implies-unit-union/L A (member?/out S1-/>X) S1UX=S2
    <- not-member-update-implies-unit-union S1-/>X A S1UX=S2.

%worlds () (add-implies-unit-union/L _ _ _).
%total { } (add-implies-unit-union/L _ _ _).

- : add-implies-unit-union A U
    <- member?-total M?
    <- add-implies-unit-union/L A M? U.

%worlds () (add-implies-unit-union _ _).
%total { } (add-implies-unit-union _ _).


%theorem add-implies-leq :
	forall*	{S1} {X} {S2}
	forall	{A: add S1 X S2}
	exists	{L: leq S1 S2}
	true.

- : add-implies-leq A L
    <- add-implies-unit-union A U
    <- union-implies-leq U L _.

%worlds () (add-implies-leq _ _).
%total { } (add-implies-leq _ _).


%theorem add-member-preserves-leq :
        forall* {S1} {S2} {S} {N}
        forall  {L1: leq S1 S}
                {A: add S1 N S2}
                {M: lookup S N unit/}
        exists  {L2: leq S2 S}
        true.

- : add-member-preserves-leq L1 A M L2
    <- lookup-implies-update M AP
    <- update-left-preserves-leq* L1 A AP L2.

%worlds () (add-member-preserves-leq _ _ _ _).
%total { } (add-member-preserves-leq _ _ _ _).


%theorem unit-union-implies-add :
	forall*	{S1} {X} {S2}
	forall	{U: union S1 (set/1 X) S2}
	exists	{A: add S1 X S2}
	true.

%theorem unit-union-implies-add/L :
	forall*	{S1} {X} {S2} {B}
	forall	{U: union S1 (set/1 X) S2}
		{M?: member? S1 X B}
	exists	{A: add S1 X S2}
	true.

- : unit-union-implies-add/L S1UX=S2 (member?/in S1->X) S1+X=S2
    <- member-implies-unit-leq S1->X X<=S1
    <- leq-implies-union X<=S1 XUS1=S1
    <- union-commutative XUS1=S1 S1UX=S1
    <- union-unique S1UX=S1 S1UX=S2 eq/ eq/ S1=S2
    <- member-implies-add S1->X S1+X=S1
    <- add-respects-eq S1+X=S1 eq/ nat`eq/ S1=S2 S1+X=S2.

- : unit-union-implies-add/L S1UX=S2 (member?/out S1-/>X) S1+X=S2
    <- add-total S1+X=S3
    <- add-implies-unit-union S1+X=S3 S1UX=S3
    <- union-unique S1UX=S3 S1UX=S2 eq/ eq/ S3=S2
    <- add-respects-eq S1+X=S3 eq/ nat`eq/ S3=S2 S1+X=S2.

%worlds () (unit-union-implies-add/L _ _ _).
%total { } (unit-union-implies-add/L _ _ _).

- : unit-union-implies-add U A
    <- member?-total M?
    <- unit-union-implies-add/L U M? A.

%worlds () (unit-union-implies-add _ _).
%total { } (unit-union-implies-add _ _).


%theorem union-left-preserves-member* :
	forall* {S1} {S2} {S3} {N}
	forall {M:lookup S2 N unit/}
	       {U:union S1 S2 S3}
	exists {M:lookup S3 N unit/}
	true.

- : union-left-preserves-member* M U MP
    <- union-left-affects-lookup M U _ MP.

%worlds () (union-left-preserves-member* _ _ _).
%total { } (union-left-preserves-member* _ _ _).


%theorem union-right-preserves-member* :
        forall* {S1} {S2} {S3} {N}
        forall {M:lookup S1 N unit/}
               {U:union S1 S2 S3}
        exists {M:lookup S3 N unit/}
        true.

- : union-right-preserves-member* M U MP
    <- union-right-affects-lookup M U _ MP.

%worlds () (union-right-preserves-member* _ _ _).
%total { } (union-right-preserves-member* _ _ _).


% not sure if this is the right way to express this lemma.
%theorem add-member-right-preserves-union :
        forall* {S1} {S2} {S3} {N} {S2P}
        forall  {U1: union S1 S2 S3}
                {A: add S2 N S2P}
                {M: member S3 N}
        exists  {U2: union S1 S2P S3}
        true.

- : add-member-right-preserves-union U1 A M U2
    <- add-implies-unit-union A UU2
    <- member-implies-add M A3
    <- add-implies-unit-union A3 UU3
    <- union-associative* U1 UU3 UU2 U2.

%worlds () (add-member-right-preserves-union _ _ _ _).
%total { } (add-member-right-preserves-union _ _ _ _).


%theorem union-preserves-disjoint-converse:
	forall* {S1} {S2} {S3} {S}
	forall	{D: disjoint S3 S}
		{U: union S1 S2 S3}
	exists	{D1: disjoint S1 S}
		{D2: disjoint S2 S}
	true.

%theorem union-preserves-disjoint-converse/L:
	forall* {S1} {S2} {S3} {S} {B1} {B2}
	forall	{D: disjoint S3 S}
		{U: union S1 S2 S3}
		{D1?: disjoint? S1 S B1}
		{D2?: disjoint? S2 S B2}
	exists	{D1: disjoint S1 S}
		{D2: disjoint S2 S}
	true.

- : union-preserves-disjoint-converse/L _ _ 
	(disjoint?/yes D1) (disjoint?/yes D2) D1 D2.

- : union-preserves-disjoint-converse/L D U
	(disjoint?/no M1 M) _ D1 D2
    <- union-right-preserves-member* M1 U M3
    <- disjoint-lookup-contradiction D M3 M F
    <- false-implies-disjoint F D1
    <- false-implies-disjoint F D2.

- : union-preserves-disjoint-converse/L D U
	_ (disjoint?/no M2 M) D1 D2
    <- union-left-preserves-member* M2 U M3
    <- disjoint-lookup-contradiction D M3 M F
    <- false-implies-disjoint F D1
    <- false-implies-disjoint F D2.

%worlds () (union-preserves-disjoint-converse/L _ _ _ _ _ _).
%total { } (union-preserves-disjoint-converse/L _ _ _ _ _ _).

- : union-preserves-disjoint-converse SD SU S1 S2
    <- disjoint?-total D1?
    <- disjoint?-total D2?
    <- union-preserves-disjoint-converse/L SD SU D1? D2? S1 S2.

%worlds () (union-preserves-disjoint-converse _ _ _ _).
%total { } (union-preserves-disjoint-converse _ _ _ _).



%%% Theorems about size, union and intersection


%theorem union-intersection-size :
	forall*	{S1} {S2} {S3} {S4} {N1} {N2} {N3} {N4} {N}
	forall	{U: union S1 S2 S3}
		{I: intersection S1 S2 S4}
		{SZ1: size S1 N1}
		{SZ2: size S2 N2}
		{SZ3: size S3 N3}
		{SZ4: size S4 N4}
		{P12: plus N1 N2 N}
	exists	{P34: plus N3 N4 N}
	true.

- : union-intersection-size 
	(union/L) (intersection/L) 
	size/0 SZ2 SZ3 size/0 
	plus/z P
    <- plus-right-identity _ PP
    <- size-deterministic SZ2 SZ3 eq/ N2=N3
    <- plus-respects-eq PP N2=N3 nat`eq/ nat`eq/ P.

- : union-intersection-size
	union/L intersection/R
	size/0 size/0 size/0 size/0
        plus/z plus/z.

- : union-intersection-size
	union/R intersection/L
	size/0 size/0 size/0 size/0
        plus/z plus/z.

- : union-intersection-size
	union/R intersection/R
	SZ1 size/0 SZ3 size/0
	N1+0=N N3+0=N
    <- size-deterministic SZ1 SZ3 eq/ N1=N3
    <- plus-respects-eq N1+0=N N1=N3 nat`eq/ nat`eq/ N3+0=N.

- : union-intersection-size
	(union/= U12 nat`eq/) I
        (size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444: size S444 N444)
        (plus/s N1+SN2=N) SN3+N444=SN
    <- intersection/=-inversion I nat`eq/ _ _ _ I12 E
    <- plus-total N1+N2=N-1
    <- size-total SZ4
    <- union-intersection-size U12 I12 SZ1 SZ2 SZ3 SZ4 N1+N2=N-1 N3+N4=N-1
    <- plus-swap-succ (plus/s N1+N2=N-1) N1+SN2=SN-1
    <- plus-swap-succ (plus/s N3+N4=N-1) N3+SN4=SN-1
    <- plus-deterministic N1+SN2=SN-1 N1+SN2=N nat`eq/ nat`eq/ SN-1=N
    <- plus-respects-eq N3+SN4=SN-1 nat`eq/ nat`eq/ SN-1=N N3+SN4=N
    <- size-deterministic (size/+ SZ4) SZ444 E SN4=N444
    <- plus-respects-eq (plus/s N3+SN4=N) nat`eq/ SN4=N444 nat`eq/ SN3+N444=SN.

- : union-intersection-size
	(union/< U103 SN0+N1=N2) I
	(size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444:size S444 N4)
	(plus/s N1+SN2=N) (plus/s N3+N4=N)
    <- intersection/<-inversion I SN0+N1=N2 S4 I104 S4<<N1=S444
    <- shift-preserves-size-converse SZ444 S4<<N1=S444 SZ4
    <- union-intersection-size 
	U103 I104 SZ1 (size/+ SZ2) SZ3 SZ4 N1+SN2=N N3+N4=N.

- : union-intersection-size
	(union/> U023 SN0+N2=N1) I
	(size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444:size S444 N4)
	(plus/s N1+SN2=N) (plus/s N3+N4=N)
    <- intersection/>-inversion I SN0+N2=N1 S4 I024 S4<<N2=S444
    <- shift-preserves-size-converse SZ444 S4<<N2=S444 SZ4
    <- plus-swap-succ-converse N1+SN2=N SN1+N2=N
    <- union-intersection-size 
	U023 I024 (size/+ SZ1) SZ2 SZ3 SZ4 SN1+N2=N N3+N4=N.

%worlds () (union-intersection-size _ _ _ _ _ _ _ _).
%total (U) (union-intersection-size U _ _ _ _ _ _ _).



%theorem intersection-characterization:
	forall* {A} {B} {C} {D} {E}
	forall	{U1: union C D A}
		{U2: union C E B}
		{D: disjoint D E}
	exists	{I: intersection A B C}
	true.

%theorem intersection-characterization/L:
	forall* {A} {B} {C} {D} {E} {CP} {B?}
	forall	{U1: union C D A}
		{U2: union C E B}
		{D: disjoint D E}
		{I: intersection A B CP}
		{E?: eq? CP C B?}
	exists	{E: eq CP C}
	true.

- : intersection-characterization/L _ _ _ _ eq?/yes eq/.

- : intersection-characterization/L CUD=A CUE=B D^E A^B=CP 
	(ne/< CP->X C-/>X) EQ
    <- intersection-preserves-member-converse CP->X A^B=CP A->X B->X
    <- not-member-union-left-preserves-member-converse C-/>X A->X CUD=A D->X
    <- not-member-union-left-preserves-member-converse C-/>X B->X CUE=B E->X
    <- disjoint-member-contradiction D^E D->X E->X FALSE
    <- false-implies-eq FALSE EQ.

- : intersection-characterization/L CUD=A CUE=B D^E A^B=CP 
	(ne/> CP-/>X C->X) EQ
    <- union-right-preserves-member* C->X CUD=A A->X
    <- union-right-preserves-member* C->X CUE=B B->X
    <- intersection-preserves-member A->X B->X A^B=CP CP->X
    <- member-not-member-contradiction CP->X CP-/>X FALSE
    <- false-implies-eq FALSE EQ.

%worlds () (intersection-characterization/L _ _ _ _ _ _).
%total { } (intersection-characterization/L _ _ _ _ _ _).

- : intersection-characterization CUD=A CUE=B D^E A^B=C
    <- intersection-total A^B=CP
    <- eq?-total EQ?
    <- intersection-characterization/L CUD=A CUE=B D^E A^B=CP EQ? EQ
    <- intersection-respects-eq A^B=CP eq/ eq/ EQ A^B=C.

%worlds () (intersection-characterization _ _ _ _).
%total { } (intersection-characterization _ _ _ _).


