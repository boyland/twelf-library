%%%%% set-extra.elf
%%%%% Extra theorems about sets not derived from map.
%%%%% This file is part of the set.elf signature



%%%% Theorems


%theorem member-not-member-contradiction :
	forall* {S} {N}
	forall	{M: lookup S N unit/}
		{NM: not-member S N}
	exists	{F: void}
	true.

- : member-not-member-contradiction M NM F
    <- not-member-lookup-not-equal NM M N<>N
    <- nat`ne-anti-reflexive N<>N F.

%worlds () (member-not-member-contradiction _ _ _).
%total { } (member-not-member-contradiction _ _ _).


%theorem add-preserves-member :
	forall* {S} {N1} {N2} {SP}
	forall	{SM: lookup S N1 unit/}
		{SA: update S N2 unit/ SP}
	exists	{SMP: lookup SP N1 unit/}
	true.

%theorem add-preserves-member/L :
	forall* {S} {N1} {N2} {SP} {B}
	forall	{SM: lookup S N1 unit/}
		{SA: update S N2 unit/ SP}
		{EQ?: nat`eq? N1 N2 B}
	exists	{SMP: lookup SP N1 unit/}
	true.

- : add-preserves-member/L SM SA (nat`eq?/no NE) SMP
    <- update-preserves-lookup SM SA NE SMP.

- : add-preserves-member/L _ SA (nat`eq?/yes) SMP
    <- update-implies-lookup SA SMP.

%worlds () (add-preserves-member/L _ _ _ _).
%total { } (add-preserves-member/L _ _ _ _).

- : add-preserves-member SM SA SMP
    <- nat`eq?-total EQ?
    <- add-preserves-member/L SM SA EQ? SMP.

%worlds () (add-preserves-member _ _ _).
%total { } (add-preserves-member _ _ _).


%theorem union-right-distributes-over-intersection :
	forall* {S1} {S2} {S3} {S4} {S7}
        forall {I12:intersection S1 S2 S3} {U34:union S3 S4 S7}
        exists {S5} {S6} {U14:union S1 S4 S5} {U24:union S2 S4 S6}
               {I56:intersection S5 S6 S7}
	true.

- : union-right-distributes-over-intersection S1*S2=S3 S3+S4=S7 S5 S6
                                              S1+S4=S5 S2+S4=S6 S5*S6=S7
    <- union-total S1+S4=S5
    <- union-total S2+S4=S6
    <- intersection-total S5*S6=S7P
    <- union-implies-leq S2+S4=S6 _ S4<=S6
    <- leq-implies-intersection S4<=S6 S4*S6=S4
    <- intersection-total S1*S6=S8
    <- intersection-total S1*S4=S9
    <- intersection-right-distributes-over-union* S1+S4=S5 S5*S6=S7P
                                                  S1*S6=S8 S4*S6=S4 S8+S4=S7P
    <- intersection-left-distributes-over-union* S2+S4=S6 S1*S6=S8
                                                 S1*S2=S3 S1*S4=S9 S3+S9=S8
    <- intersection-implies-leq S1*S4=S9 _ S9<=S4
    <- leq-implies-union S9<=S4 S9+S4=S4
    <- union-associative* S3+S9=S8 S8+S4=S7P S9+S4=S4 S3+S4=S7P
    <- union-deterministic S3+S4=S7P S3+S4=S7 eq/ eq/ S7P=S7 
    <- intersection-respects-eq S5*S6=S7P eq/ eq/ S7P=S7 S5*S6=S7.

%worlds () (union-right-distributes-over-intersection _ _ _ _ _ _ _).
%total { } (union-right-distributes-over-intersection _ _ _ _ _ _ _).

%{%
#define MUL_COMMUTATIVE 1
#define ADD_TOTAL 1
#define ADD(X,Y) X*Y
#define ADDN intersection
#define MUL(X,Y) X+Y
#define MULN union
#define EQ eq
BEGIN_ELF
#include "distrib.i"
END_ELF
#undef EQ
#undef ADD
#undef ADDN
#undef MUL
#undef MULN
#undef ADD_TOTAL
#undef MUL_COMMUTATIVE
%}%


% a useful way to break down a union:

%theorem leq-union-implies-leq-intersection-union :
	forall*	{A} {B} {C} {D} {E} {F}
	forall	{L: leq A D}
		{U: union B C D}
		{I: intersection A B E}
		{V: union E C F}
	exists	{M: leq A F}
	true.

- : leq-union-implies-leq-intersection-union
	A<=D BUC=D A^B=E EUC=F A<=F
    <- leq-implies-intersection A<=D A^D=A
    <- intersection-total* A C G A^C=G
    <- intersection-left-distributes-over-union* BUC=D A^D=A A^B=E A^C=G EUG=A
    <- intersection-implies-leq A^C=G G<=A G<=C
    <- union-left-preserves-leq* G<=C EUG=A EUC=F A<=F.

%worlds () (leq-union-implies-leq-intersection-union _ _ _ _ _).
%total { } (leq-union-implies-leq-intersection-union _ _ _ _ _).


%theorem leq-union-disjoint-implies-leq :
	forall*	{A} {B} {C} {D}
	forall	{L: leq A D}
		{U: union B C D}
		{X: disjoint A B}
	exists	{M: leq A C}
	true.

- : leq-union-disjoint-implies-leq A<=D BUC=D A^B A<=C
    <- disjoint-intersection-empty A^B A^B=0
    <- leq-union-implies-leq-intersection-union A<=D BUC=D A^B=0 union/L A<=C.

%worlds () (leq-union-disjoint-implies-leq _ _ _ _).
%total { } (leq-union-disjoint-implies-leq _ _ _ _).


%theorem intersection-characterization:
	forall* {A} {B} {C} {D} {E}
	forall	{U1: union C D A}
		{U2: union C E B}
		{D: disjoint D E}
	exists	{I: intersection A B C}
	true.

%theorem intersection-characterization/L:
	forall* {A} {B} {C} {D} {E}
	forall	{NA} {NB}
		{SA: size A NA}
		{SB: size B NB}
		{U1: union C D A}
		{U2: union C E B}
		{D: disjoint D E}
	exists	{I: intersection A B C}
	true.

- : intersection-characterization/L _ _ _ _ _ _ _ intersection/R.

- : intersection-characterization/L _ _ _ _ _ _ _ intersection/L.

- : intersection-characterization/L _ _ _ _ union/R AUE=B _ A^B=A
    <- union-implies-leq AUE=B A<=B _
    <- leq-implies-intersection A<=B A^B=A.

- : intersection-characterization/L _ _ _ _ BUD=A union/R _ A^B=B
    <- union-implies-leq BUD=A B<=A _
    <- leq-implies-intersection B<=A B^A=B
    <- intersection-commutative B^A=B A^B=B.

- : intersection-characterization/L _ _ _ _ union/L union/L A^B A^B=0
    <- disjoint-intersection-empty A^B A^B=0.

- : intersection-characterization/L _ ZB (size/+ SA) SB
	(union/< CPUYD=AP Y+1+NA=ND) CUE=B
	(disjoint/< DP^XE X+1+ND=NE) A^B=C
    <- plus-swap-succ Y+1+NA=ND Y+NA+1=ND
    <- plus-associative-converse Y+NA+1=ND X+1+ND=NE Z X+1+Y=Z Z+NA+1=NE
    <- plus-swap-succ-converse Z+NA+1=NE Z+1+NA=NE
    <- union/<-inversion CUE=B Z+1+NA=NE BP CPUZE=BP B=ABP
    <- size-respects-eq SB B=ABP nat`eq/ SABP
    <- size-total SBP
    <- size-unique (size/+ SBP) SABP eq/ SZBP=ZB
    <- nat`meta-eq (s ZBP) ZB SZBP=ZB
    <- intersection-characterization/L _ _ SA SBP
	CPUYD=AP CPUZE=BP (disjoint/< DP^XE X+1+Y=Z) AP^BP=CP
    <- eq-symmetric B=ABP ABP=B
    <- intersection-respects-eq (intersection/= AP^BP=CP unit`union/ nat`eq/) eq/
	ABP=B eq/ A^B=C.

- : intersection-characterization/L _ ZB (size/+ SA) SB
	(union/= CPUDP=AP _ nat`eq/) CUE=B
	(disjoint/< DP^XE X+1+NA=NE) A^B=C
    <- union/<-inversion CUE=B X+1+NA=NE BP CPUXE=BP B=ABP
    <- size-respects-eq SB B=ABP nat`eq/ SABP
    <- size-total SBP
    <- size-unique (size/+ SBP) SABP eq/ SZBP=ZB
    <- nat`meta-eq (s ZBP) ZB SZBP=ZB
    <- intersection-characterization/L _ _ SA SBP
	CPUDP=AP CPUXE=BP DP^XE AP^BP=CP
    <- eq-symmetric B=ABP ABP=B
    <- intersection-respects-eq (intersection/= AP^BP=CP unit`union/ nat`eq/) eq/
	ABP=B eq/ A^B=C.

- : intersection-characterization/L _ ZB (size/+ SA) SB
	(union/= CPUDP=AP _ nat`eq/) CUE=B
	(disjoint/> XD^EP X+1+NE=NA) A^B=C
    <- union/>-inversion CUE=B X+1+NE=NA BP XCUEP=BP B=EBP
    <- size-respects-eq SB B=EBP nat`eq/ SEBP
    <- size-total SBP
    <- size-unique (size/+ SBP) SEBP eq/ SZBP=ZB
    <- nat`meta-eq (s ZBP) ZB SZBP=ZB
    <- intersection-characterization/L _ _ (size/+ SA) SBP
	(union/= CPUDP=AP unit`union/ nat`eq/) XCUEP=BP XD^EP XA^BP=XC
    <- eq-symmetric B=EBP EBP=B
    <- plus-swap-succ X+1+NE=NA X+NE+1=NA
    <- plus-commutative X+NE+1=NA NE+1+X=NA
    <- intersection-respects-eq 
	(intersection/> (shift/+ NE+1+X=NA) XA^BP=XC X+1+NE=NA)
	eq/ EBP=B eq/ A^B=C.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/> YCUDP=AP Y+1+NA=NC) (union/= CPUEP=BP _ nat`eq/)
	D^E (intersection/< (shift/+ NA+1+Y=NC) AP^YB=YC Y+1+NA=NC)
    <- disjoint/<-inversion D^E Y+1+NA=NC DP^YE
    <- intersection-characterization/L _ _ SA (size/+ SB)
	YCUDP=AP (union/= CPUEP=BP unit`union/ nat`eq/) DP^YE AP^YB=YC
    <- plus-swap-succ Y+1+NA=NC Y+NA+1=NC
    <- plus-commutative Y+NA+1=NC NA+1+Y=NC.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/> YCUDP=AP Y+1+ND=NC) (union/< CPUZE=BP Z+1+NC=NE)
	D^E (intersection/< (shift/+ ND+1+Y=NC) AP^YB=YC Y+1+ND=NC)
    <- plus-swap-succ Y+1+ND=NC Y+ND+1=NC
    <- plus-associative-converse Y+ND+1=NC Z+1+NC=NE X Z+1+Y=X X+ND+1=NE
    <- plus-swap-succ-converse X+ND+1=NE X+1+ND=NE
    <- disjoint/<-inversion D^E X+1+ND=NE DP^XE
    <- intersection-characterization/L _ _ SA (size/+ SB)
	YCUDP=AP (union/< CPUZE=BP Z+1+Y=X) DP^XE AP^YB=YC
    <- plus-commutative Y+ND+1=NC ND+1+Y=NC.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/> YCUDP=AP Y+1+ND=NC) (union/> ZCUEP=BP Z+1+NE=NC)
	(disjoint/< DP^XE X+1+ND=NE)
        (intersection/< (shift/+ ND+1+Y=NC) AP^XB=YC X+1+ND=NE)
    <- plus-swap-succ X+1+ND=NE X+ND+1=NE
    <- plus-associative-converse X+ND+1=NE Z+1+NE=NC YY Z+1+X=YY YY+ND+1=NC
    <- plus-swap-succ Y+1+ND=NC Y+ND+1=NC
    <- plus-right-cancels YY+ND+1=NC Y+ND+1=NC nat`eq/ nat`eq/ YY=Y
    <- plus-respects-eq Z+1+X=YY nat`eq/ nat`eq/ YY=Y Z+1+X=Y
    <- intersection-characterization/L _ _ SA (size/+ SB)
	YCUDP=AP (union/> ZCUEP=BP Z+1+X=Y) DP^XE AP^XB=YC
    <- plus-commutative Y+ND+1=NC ND+1+Y=NC.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/> YCUDP=AP Y+1+ND=NC) (union/> ZCUEP=BP Z+1+NE=NC)
	(disjoint/> XD^EP X+1+NE=ND)
	(intersection/> (shift/+ NE+1+Z=NC) XA^BP=ZC X+1+NE=ND)
    <- plus-swap-succ X+1+NE=ND X+NE+1=ND
    <- plus-associative-converse X+NE+1=ND Y+1+ND=NC ZZ Y+1+X=ZZ ZZ+NE+1=NC
    <- plus-swap-succ Z+1+NE=NC Z+NE+1=NC
    <- plus-right-cancels ZZ+NE+1=NC Z+NE+1=NC nat`eq/ nat`eq/ ZZ=Z
    <- plus-respects-eq Y+1+X=ZZ nat`eq/ nat`eq/ ZZ=Z Y+1+X=Z
    <- intersection-characterization/L _ _ (size/+ SA) SB
	(union/> YCUDP=AP Y+1+X=Z) ZCUEP=BP XD^EP XA^BP=ZC
    <- plus-commutative Z+NE+1=NC NE+1+Z=NC.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/< CPUYD=AP Y+1+NC=ND)
	(union/> ZCUEP=BP Z+1+NE=NC) D^E
	(intersection/> (shift/+ NE+1+Z=NC) ZA^BP=ZC Z+1+NE=NC)
    <- plus-swap-succ Z+1+NE=NC Z+NE+1=NC
    <- plus-associative-converse Z+NE+1=NC Y+1+NC=ND X Y+1+Z=X X+NE+1=ND
    <- plus-swap-succ-converse X+NE+1=ND X+1+NE=ND
    <- disjoint/>-inversion D^E X+1+NE=ND XD^EP
    <- intersection-characterization/L _ _ (size/+ SA) SB
	(union/< CPUYD=AP Y+1+Z=X) ZCUEP=BP XD^EP ZA^BP=ZC
    <- plus-commutative Z+NE+1=NC NE+1+Z=NC.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/< CPUYD=AP Y+1+NC=ND)
	(union/= CPUEP=BP _ nat`eq/) D^E
	(intersection/= AP^BP=CP unit`union/ nat`eq/)
    <- disjoint/>-inversion D^E Y+1+NC=ND YD^EP
    <- intersection-characterization/L _ _ SA SB
	CPUYD=AP CPUEP=BP YD^EP AP^BP=CP.

- : intersection-characterization/L _ _ (size/+ SA) (size/+ SB)
	(union/< CPUYD=AP Y+1+NC=ND)
	(union/< CPUZE=BP Z+1+NC=NE) (disjoint/> XD^EP X+1+NE=ND)
	(intersection/= AP^BP=CP unit`union/ nat`eq/)
    <- plus-swap-succ Z+1+NC=NE Z+NC+1=NE
    <- plus-associative-converse Z+NC+1=NE X+1+NE=ND YY X+1+Z=YY YY+NC+1=ND
    <- plus-swap-succ Y+1+NC=ND Y+NC+1=ND
    <- plus-right-cancels YY+NC+1=ND Y+NC+1=ND nat`eq/ nat`eq/ YY=Y
    <- plus-respects-eq X+1+Z=YY nat`eq/ nat`eq/ YY=Y X+1+Z=Y
    <- intersection-characterization/L _ _ SA SB
	CPUYD=AP CPUZE=BP (disjoint/> XD^EP X+1+Z=Y) AP^BP=CP.

%worlds ()   (intersection-characterization/L _ _ _ _  _ _ _ _).
%total [A B] (intersection-characterization/L A B _ _  _ _ _ _).

- : intersection-characterization CUD=A CUE=B D^E AUB=C
    <- size-total SA
    <- size-total SB
    <- intersection-characterization/L _ _ SA SB CUD=A CUE=B D^E AUB=C.

%worlds () (intersection-characterization _ _ _ _).
%total { } (intersection-characterization _ _ _ _).



%%% set membership w.r.t. union:


%theorem union-left-preserves-member* :
	forall* {S1} {S2} {S3} {N}
	forall {M:lookup S2 N unit/}
	       {U:union S1 S2 S3}
	exists {M:lookup S3 N unit/}
	true.

- : union-left-preserves-member* M U MP
    <- union-left-affects-lookup M U _ MP.

%worlds () (union-left-preserves-member* _ _ _).
%total { } (union-left-preserves-member* _ _ _).


%theorem union-right-preserves-member* :
        forall* {S1} {S2} {S3} {N}
        forall {M:lookup S1 N unit/}
               {U:union S1 S2 S3}
        exists {M:lookup S3 N unit/}
        true.

- : union-right-preserves-member* M U MP
    <- union-right-affects-lookup M U _ MP.

%worlds () (union-right-preserves-member* _ _ _).
%total { } (union-right-preserves-member* _ _ _).


%theorem union-preserves-disjoint-converse:
	forall* {S1} {S2} {S3} {S}
	forall	{D: disjoint S3 S}
		{U: union S1 S2 S3}
	exists	{D1: disjoint S1 S}
		{D2: disjoint S2 S}
	true.

%theorem union-preserves-disjoint-converse/L:
	forall* {S1} {S2} {S3} {S} {B1} {B2}
	forall	{D: disjoint S3 S}
		{U: union S1 S2 S3}
		{D1?: disjoint? S1 S B1}
		{D2?: disjoint? S2 S B2}
	exists	{D1: disjoint S1 S}
		{D2: disjoint S2 S}
	true.

- : union-preserves-disjoint-converse/L _ _ 
	(disjoint?/yes D1) (disjoint?/yes D2) D1 D2.

- : union-preserves-disjoint-converse/L D U
	(disjoint?/no M1 M) _ D1 D2
    <- union-right-preserves-member* M1 U M3
    <- disjoint-lookup-contradiction D M3 M F
    <- false-implies-disjoint F D1
    <- false-implies-disjoint F D2.

- : union-preserves-disjoint-converse/L D U
	_ (disjoint?/no M2 M) D1 D2
    <- union-left-preserves-member* M2 U M3
    <- disjoint-lookup-contradiction D M3 M F
    <- false-implies-disjoint F D1
    <- false-implies-disjoint F D2.

%worlds () (union-preserves-disjoint-converse/L _ _ _ _ _ _).
%total { } (union-preserves-disjoint-converse/L _ _ _ _ _ _).

- : union-preserves-disjoint-converse SD SU S1 S2
    <- disjoint?-total D1?
    <- disjoint?-total D2?
    <- union-preserves-disjoint-converse/L SD SU D1? D2? S1 S2.

%worlds () (union-preserves-disjoint-converse _ _ _ _).
%total { } (union-preserves-disjoint-converse _ _ _ _).



%%% Theorems about size, union and intersection


%theorem union-intersection-size :
	forall*	{S1} {S2} {S3} {S4} {N1} {N2} {N3} {N4} {N}
	forall	{U: union S1 S2 S3}
		{I: intersection S1 S2 S4}
		{SZ1: size S1 N1}
		{SZ2: size S2 N2}
		{SZ3: size S3 N3}
		{SZ4: size S4 N4}
		{P12: plus N1 N2 N}
	exists	{P34: plus N3 N4 N}
	true.

- : union-intersection-size 
	(union/L) (intersection/L) 
	size/0 SZ2 SZ3 size/0 
	plus/z P
    <- plus-right-identity _ PP
    <- size-deterministic SZ2 SZ3 eq/ N2=N3
    <- plus-respects-eq PP N2=N3 nat`eq/ nat`eq/ P.

- : union-intersection-size
	union/L intersection/R
	size/0 size/0 size/0 size/0
        plus/z plus/z.

- : union-intersection-size
	union/R intersection/L
	size/0 size/0 size/0 size/0
        plus/z plus/z.

- : union-intersection-size
	union/R intersection/R
	SZ1 size/0 SZ3 size/0
	N1+0=N N3+0=N
    <- size-deterministic SZ1 SZ3 eq/ N1=N3
    <- plus-respects-eq N1+0=N N1=N3 nat`eq/ nat`eq/ N3+0=N.

- : union-intersection-size
	(union/= U12 unit`union/ nat`eq/) I
        (size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444: size S444 N444)
        (plus/s N1+SN2=N) SN3+N444=SN
    <- intersection/=-inversion I nat`eq/ _ _ unit`union/ I12 E
    <- plus-total N1+N2=N-1
    <- size-total SZ4
    <- union-intersection-size U12 I12 SZ1 SZ2 SZ3 SZ4 N1+N2=N-1 N3+N4=N-1
    <- plus-swap-succ (plus/s N1+N2=N-1) N1+SN2=SN-1
    <- plus-swap-succ (plus/s N3+N4=N-1) N3+SN4=SN-1
    <- plus-deterministic N1+SN2=SN-1 N1+SN2=N nat`eq/ nat`eq/ SN-1=N
    <- plus-respects-eq N3+SN4=SN-1 nat`eq/ nat`eq/ SN-1=N N3+SN4=N
    <- size-deterministic (size/+ SZ4) SZ444 E SN4=N444
    <- plus-respects-eq (plus/s N3+SN4=N) nat`eq/ SN4=N444 nat`eq/ SN3+N444=SN.

- : union-intersection-size
	(union/< U103 SN0+N1=N2) I
	(size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444:size S444 N4)
	(plus/s N1+SN2=N) (plus/s N3+N4=N)
    <- intersection/<-inversion I SN0+N1=N2 S4 I104 S4<<N1=S444
    <- shift-preserves-size-converse SZ444 S4<<N1=S444 SZ4
    <- union-intersection-size 
	U103 I104 SZ1 (size/+ SZ2) SZ3 SZ4 N1+SN2=N N3+N4=N.

- : union-intersection-size
	(union/> U023 SN0+N2=N1) I
	(size/+ SZ1) (size/+ SZ2) (size/+ SZ3) (SZ444:size S444 N4)
	(plus/s N1+SN2=N) (plus/s N3+N4=N)
    <- intersection/>-inversion I SN0+N2=N1 S4 I024 S4<<N2=S444
    <- shift-preserves-size-converse SZ444 S4<<N2=S444 SZ4
    <- plus-swap-succ-converse N1+SN2=N SN1+N2=N
    <- union-intersection-size 
	U023 I024 (size/+ SZ1) SZ2 SZ3 SZ4 SN1+N2=N N3+N4=N.

%worlds () (union-intersection-size _ _ _ _ _ _ _ _).
%total (U) (union-intersection-size U _ _ _ _ _ _ _).



