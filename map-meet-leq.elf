%{%
#ifdef DATA_MEET_IMPLIES_LEQ
%}%

%theorem meet-implies-leq* :
	forall* {M1} {M2} {M3}
	forall {A:meet M1 M2 M3}
        exists {L:leq M3 M1}
	true.

- : meet-implies-leq* meet/L leq/0.

- : meet-implies-leq* meet/R leq/0.

- : meet-implies-leq* (meet/= M1*M2=M3 D1*D2=D3 nat`eq/) 
                      (leq/= M3<=M1 D3<=D1 nat`eq/)
    <- data`meet-implies-leq* D1*D2=D3 D3<=D1
    <- meet-implies-leq* M1*M2=M3 M3<=M1.

- : meet-implies-leq* (meet/< M3<<N1=S1M3 M1*M022=M3 N0+1+N1+N2) 
                      S1M3<=M111
    <- meet-implies-leq* M1*M022=M3 M3<=M1
    <- shift-left-preserves-leq* M3<=M1 M3<<N1=S1M3 S1M3<=M111.

- : meet-implies-leq* (meet/> M3<<N2=S2M3 M311*M2=M3 N3+1+N2=N1) 
                      S2M3<=M111
    <- meet-implies-leq* M311*M2=M3 M3<=M311
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-commutative N3+N2+1=N1 N2+1+N3=N1
    <- shift-preserves-leq* M3<=M311 M3<<N2=S2M3 (shift/+ N2+1+N3=N1) 
                            S2M3<=M111.

%worlds () (meet-implies-leq* _ _).
%total (A) (meet-implies-leq* A _).

%{%
#ifdef DATA_MEET_COMMUTATIVE
%}%

%theorem meet-implies-leq :
	forall* {M1} {M2} {M3}
	forall {A:meet M1 M2 M3}
        exists {L1:leq M3 M1} {L2:leq M3 M2}
	true.

- : meet-implies-leq M1*M2=M3 M3<=M1 M3<=M2
    <- meet-implies-leq* M1*M2=M3 M3<=M1
    <- meet-commutative M1*M2=M3 M2*M1=M3
    <- meet-implies-leq* M2*M1=M3 M3<=M2.

%worlds () (meet-implies-leq _ _ _).
%total { } (meet-implies-leq _ _ _).

%{%
#endif
#endif


#ifdef DATA_MEET_IS_GLB
%}%

%theorem meet-is-glb :
	forall* {M0} {M1} {M2} {M3}
	forall {A:meet M1 M2 M3}
	       {L1:leq M0 M1} {L2:leq M0 M2}
	exists {L3:leq M0 M3}
	true.

- : meet-is-glb _ leq/0 _ leq/0.

- : meet-is-glb _ _ leq/0 leq/0.

- : meet-is-glb (meet/= M1*M2=M3 D1*D2=D3 nat`eq/)
                (leq/= M0<=M1 D0<=D1 nat`eq/) L2
                (leq/= M0<=M3 D0<=D3 nat`eq/)
    <- leq/=-inversion L2 nat`eq/ D0<=D2 M0<=M2
    <- data`meet-is-glb D1*D2=D3 D0<=D1 D0<=D2 D0<=D3
    <- meet-is-glb M1*M2=M3 M0<=M1 M0<=M2 M0<=M3.

- : meet-is-glb (meet/= M1*M2=M3 D1*D2=D3 nat`eq/)
                (leq/> M400<=M1 N4+1+N1=N0) L2
                (leq/> M400<=M3 N4+1+N1=N0)
    <- leq/>-inversion L2 N4+1+N1=N0 M400<=M2
    <- meet-is-glb M1*M2=M3 M400<=M1 M400<=M2 M400<=M3.

- : meet-is-glb (meet/< M3<<N1=S1M3 M1*M022=M3 N0+1+N1=N2)
                (leq/= M0<=M1 D0<=D1 nat`eq/) L2 L3
    <- leq-contradiction L2 N0+1+N1=N2 F
    <- false-implies-leq F L3.

- : meet-is-glb (meet/< M3<<N1=S1M3 M1*M322=M3 N3+1+N1=N2)
                (leq/> M500<=M1 N5+1+N1=N2) (leq/= M0<=M2 D0<=D2 nat`eq/)
                M200<=S1M3
    <- plus-right-cancels N5+1+N1=N2 N3+1+N1=N2 nat`eq/ nat`eq/ N5+1=N3+1
    <- succ-cancels N5+1=N3+1 N5=N3
    <- map/+-preserves-eq N5=N3 data`eq/ eq/ M500=M300
    <- leq-respects-eq M500<=M1 M500=M300 eq/ M300<=M1
    <- meet-is-glb M1*M322=M3 M300<=M1 (leq/= M0<=M2 D0<=D2 nat`eq/) M300<=M3
    <- plus-swap-succ N3+1+N1=N2 N3+N1+1=N2
    <- plus-commutative N3+N1+1=N2 N1+1+N3=N2
    <- shift-preserves-leq* M300<=M3 (shift/+ N1+1+N3=N2) M3<<N1=S1M3 M200<=S1M3.

- : meet-is-glb (meet/< M3<<N1=S1M3 M1*M322=M3 N3+1+N1=N2)
                (leq/> M500<=M1 N5+1+N1=N0) (leq/> M600<=M2 N6+1+N2=N0)
                M000<=S1M3
    <- plus-swap-succ N3+1+N1=N2 N3+N1+1=N2
    <- plus-associative-converse N3+N1+1=N2 N6+1+N2=N0 
                                 N5' N6+1+N3=N5' N5'+N1+1=N0
    <- plus-swap-succ N5+1+N1=N0 N5+N1+1=N0
    <- plus-right-cancels N5'+N1+1=N0 N5+N1+1=N0 nat`eq/ nat`eq/ N5'=N5
    <- plus-respects-eq N6+1+N3=N5' nat`eq/ nat`eq/ N5'=N5 N6+1+N3=N5
    <- plus-swap-succ N6+1+N3=N5 N6+N3+1=N5
    <- plus-commutative N6+N3+1=N5 N3+1+N6=N5
    <- shift-left-preserves-leq* M600<=M2 (shift/+ N3+1+N6=N5) M500<=M322
    <- meet-is-glb M1*M322=M3 M500<=M1 M500<=M322 M500<=M3
    <- plus-commutative N5+N1+1=N0 N1+1+N5=N0
    <- shift-preserves-leq* M500<=M3 (shift/+ N1+1+N5=N0) M3<<N1=S1M3 M000<=S1M3.

- : meet-is-glb (meet/> M3<<N2=S2M3 M311*M2=M3 N3+1+N2=N1)
                (leq/= M0<=M1 D0<=D1 nat`eq/) L2
                M100<=S2M3
    <- leq/>-inversion L2 N3+1+N2=N1 M300<=M2
    <- meet-is-glb M311*M2=M3 (leq/= M0<=M1 D0<=D1 nat`eq/) M300<=M2 M300<=M3
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-commutative N3+N2+1=N1 N2+1+N3=N1
    <- shift-preserves-leq* M300<=M3 (shift/+ N2+1+N3=N1) M3<<N2=S2M3 M100<=S2M3.

- : meet-is-glb (meet/> M3<<N2=S2M3 M311*M2=M3 N3+1+N2=N1)
                (leq/> M500<=M1 N5+1+N1=N0) L2
                M000<=S2M3
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-associative-converse N3+N2+1=N1 N5+1+N1=N0 
                                 N6 N5+1+N3=N6 N6+N2+1=N0
    <- plus-swap-succ-converse N6+N2+1=N0 N6+1+N2=N0
    <- leq/>-inversion L2 N6+1+N2=N0 M600<=M2
    <- plus-swap-succ N5+1+N3=N6 N5+N3+1=N6
    <- plus-commutative N5+N3+1=N6 N3+1+N5=N6
    <- shift-left-preserves-leq* M500<=M1 (shift/+ N3+1+N5=N6) M600<=M311
    <- meet-is-glb M311*M2=M3 M600<=M311 M600<=M2 M600<=M3
    <- plus-commutative N6+N2+1=N0 N2+1+N6=N0
    <- shift-preserves-leq* M600<=M3 (shift/+ N2+1+N6=N0) M3<<N2=S2M3 M000<=S2M3.

%worlds () (meet-is-glb _ _ _ _).
%total (A) (meet-is-glb A _ _ _).


%theorem meet-idempotent :
	forall* {S}
	exists {A:meet S S S}
	true.

- : meet-idempotent S*S=S
    <- meet-total S*S=S'
    <- meet-implies-leq* S*S=S' S'<=S
    <- leq-reflexive _ S<=S
    <- meet-is-glb S*S=S' S<=S S<=S S<=S'
    <- leq-anti-symmetric S'<=S S<=S' S'=S
    <- meet-respects-eq S*S=S' eq/ eq/ S'=S S*S=S.

%worlds () (meet-idempotent _).
%total { } (meet-idempotent _).


%theorem leq-implies-meet :
	forall* {M1} {M2}
	forall {L:leq M1 M2}
	exists {J:meet M1 M2 M1}
	true.

- : leq-implies-meet M1<=M2 M1*M2=M1
    <- meet-total M1*M2=M3
    <- leq-reflexive _ M1<=M1
    <- meet-is-glb M1*M2=M3 M1<=M1 M1<=M2 M1<=M3
    <- meet-implies-leq* M1*M2=M3 M3<=M1
    <- leq-anti-symmetric M3<=M1 M1<=M3 M3=M1
    <- meet-respects-eq M1*M2=M3 eq/ eq/ M3=M1 M1*M2=M1.

%worlds () (leq-implies-meet _ _).
%total { } (leq-implies-meet _ _).

%{%
#endif /* DATA_MEET_IS_GLB */


#ifdef DATA_MEET_PRESERVES_LEQ
%}%

%theorem meet-left-preserves-leq* :
	forall* {M1} {M2} {M3} {M4} {M5}
	forall {L1:leq M2 M4}
               {A:meet M1 M2 M3} {AP:meet M1 M4 M5}
	exists {L3:leq M3 M5}
	true.

- : meet-left-preserves-leq* _ meet/L _ leq/0.

- : meet-left-preserves-leq* _ meet/R _ leq/0.

- : meet-left-preserves-leq* (leq/= M2<=M4 D2<=D4 nat`eq/)
                             (meet/= M1*M2=M3 D1*D2=D3 nat`eq/)
                             M111*M144=M M133<=M
    <- meet/=-inversion M111*M144=M nat`eq/ D5 M5 D1*D4=D5 M1*M4=M5 M155=M
    <- meta-eq (map/+ N1 D5 M5) M M155=M
    <- data`meet-left-preserves-leq* D2<=D4 D1*D2=D3 D1*D4=D5 D3<=D5
    <- meet-left-preserves-leq* M2<=M4 M1*M2=M3 M1*M4=M5 M3<=M5
    <- leq-respects-eq (leq/= M3<=M5 D3<=D5 nat`eq/) eq/ M155=M M133<=M.

- : meet-left-preserves-leq* (leq/= M2<=M4 D2<=D4 nat`eq/)
                             (meet/< M3<<N1=S1M3 M1*M022=M3 N0+1+N1=N2)
                             M111*M244=M S1M3<=M
    <- meet/<-inversion M111*M244=M N0+1+N1=N2 M5 M1*M044=M5 M5<<N1=M
    <- meet-left-preserves-leq* (leq/= M2<=M4 D2<=D4 nat`eq/) 
                                M1*M022=M3 M1*M044=M5 M3<=M5
    <- shift-preserves-leq* M3<=M5 M3<<N1=S1M3 M5<<N1=M S1M3<=M.

- : meet-left-preserves-leq* (leq/= M2<=M4 D2<=D4 nat`eq/)
                             (meet/> M3<<N2=S2M3 M311*M2=M3 N3+1+N2=N1)
                             M111*M244=M S2M3<=M
    <- meet/>-inversion M111*M244=M N3+1+N2=N1 M5 M311*M4=M5 M5<<N2=M
    <- meet-left-preserves-leq* M2<=M4 M311*M2=M3 M311*M4=M5 M3<=M5
    <- shift-preserves-leq* M3<=M5 M3<<N2=S2M3 M5<<N2=M S2M3<=M.

- : meet-left-preserves-leq* (leq/> M622<=M4 N6+1+N4=N2)
                             (meet/= M1*M2=M3 D1*D2=D3 nat`eq/)   % N1=N2
                             M211*M444=M M233<=M
    <- meet/>-inversion M211*M444=M N6+1+N4=N2 M5 M611*M4=M5 M5<<N4=M
    <- meet-left-preserves-leq* M622<=M4 (meet/= M1*M2=M3 D1*D2=D3 nat`eq/)
                                M611*M4=M5 M633<=M5
    <- plus-swap-succ N6+1+N4=N2 N6+N4+1=N2
    <- plus-commutative N6+N4+1=N2 N4+1+N6=N2
    <- shift-preserves-leq* M633<=M5 (shift/+ N4+1+N6=N2) M5<<N4=M M233<=M.

- : meet-left-preserves-leq* (leq/> M622<=M4 N6+1+N4=N2)
                             (meet/> M3<<N2=S2M3 M311*M2=M3 N3+1+N2=N1) 
                             M111*M444=M S2M3<=M
    <- nat`plus-swap-succ N6+1+N4=N2 N6+N4+1=N2
    <- nat`plus-associative-converse N6+N4+1=N2 N3+1+N2=N1 
                                     N5 N3+1+N6=N5 N5+N4+1=N1
    <- nat`plus-swap-succ-converse N5+N4+1=N1 N5+1+N4=N1 
    <- meet/>-inversion M111*M444=M N5+1+N4=N1 M5 M511*M4=M5 M5<<N4=M
    <- shift-total M3<<N6=S6M3
    <- meet-left-preserves-leq* M622<=M4 
                                (meet/> M3<<N6=S6M3 M311*M2=M3 N3+1+N6=N5)
                                M511*M4=M5 S6M3<=M5
    <- shift-total S6M3<<N4=M?
    <- shifts-add M3<<N6=S6M3 S6M3<<N4=M? N6+1+N4=N2 M3<<N2=M?
    <- shift-deterministic M3<<N2=M? M3<<N2=S2M3 nat`eq/ eq/ M?=S2M3
    <- shift-respects-eq S6M3<<N4=M? nat`eq/ eq/ M?=S2M3 S6M3<<N4=S2M3
    <- shift-preserves-leq* S6M3<=M5 S6M3<<N4=S2M3 M5<<N4=M S2M3<=M.

- : meet-left-preserves-leq* (leq/> M622<=M4 N6+1+N4=N2) 
                             A1 (meet/= M1*M4=M5 D1*D4=D5 nat`eq/)
                             S1M3<=M455
    <- meet/<-inversion A1 N6+1+N4=N2 M3 M1*M622=M3 M3<<N4=S1M3
    <- meet-left-preserves-leq* M622<=M4 M1*M622=M3 M1*M4=M5 M3<=M5
    <- shift-left-preserves-leq* M3<=M5 M3<<N4=S1M3 S1M3<=M455.

- : meet-left-preserves-leq* (leq/> M622<=M4 N6+1+N4=N2)
                             A1 (meet/< M5<<N1=S1M5 M1*M544=M5 N5+1+N1=N4)
                             M<=S1M5
    <- plus-swap-succ N5+1+N1=N4 N5+N1+1=N4
    <- plus-associative-converse N5+N1+1=N4 N6+1+N4=N2 
                                 N0 N6+1+N5=N0 N0+N1+1=N2
    <- plus-swap-succ-converse N0+N1+1=N2 N0+1+N1=N2
    <- meet/<-inversion A1 N0+1+N1=N2 M3 M1*M022=M3 M3<<N1=M
    <- plus-swap-succ N6+1+N5=N0 N6+N5+1=N0
    <- plus-commutative N6+N5+1=N0 N5+1+N6=N0
    <- shift-left-preserves-leq* M622<=M4 (shift/+ N5+1+N6=N0) M022<=M544
    <- meet-left-preserves-leq* M022<=M544 M1*M022=M3 M1*M544=M5 M3<=M5
    <- shift-preserves-leq* M3<=M5 M3<<N1=M M5<<N1=S1M5 M<=S1M5.

- : meet-left-preserves-leq* L
                             (meet/< M3<<N1=S1M3 M1*M022=M3 N0+1+N1=N2)
                             (meet/> M5<<N4=S4M5 M511*M4=M5 N5+1+N4=N1)
                             S1M3<<S4M5
    <- nat`plus-swap-succ N5+1+N4=N1 N5+N4+1=N1
    <- nat`plus-associative-converse N5+N4+1=N1 N0+1+N1=N2 
                                     N6 N0+1+N5=N6 N6+N4+1=N2
    <- nat`plus-swap-succ-converse N6+N4+1=N2 N6+1+N4=N2
    <- leq/>-inversion L N6+1+N4=N2 M622<=M4
    <- plus-swap-succ N0+1+N5=N6 N0+N5+1=N6
    <- plus-commutative N0+N5+1=N6 N5+1+N0=N6
    <- shift-total M3<<N5=S5M3
    <- shift-right-preserves-meet M1*M022=M3 (shift/+ N5+1+N0=N6) M3<<N5=S5M3
                                  M511*M622=S5M3
    <- meet-left-preserves-leq* M622<=M4 M511*M622=S5M3 M511*M4=M5 S5M3<=M5
    <- shift-total S5M3<<N4=S4S5M3
    <- shifts-add M3<<N5=S5M3 S5M3<<N4=S4S5M3 N5+1+N4=N1 M3<<N1=S4S5M3
    <- shift-deterministic M3<<N1=S4S5M3 M3<<N1=S1M3 nat`eq/ eq/ S4S5M3=S1M3
    <- shift-respects-eq S5M3<<N4=S4S5M3 nat`eq/ eq/ S4S5M3=S1M3 S5M3<<N4=S1M3
    <- shift-preserves-leq* S5M3<=M5 S5M3<<N4=S1M3 M5<<N4=S4M5 S1M3<<S4M5.

%worlds () (meet-left-preserves-leq* _ _ _ _).
%total (A) (meet-left-preserves-leq* _ _ A _).

%{%
#endif /* DATA_MEET_PRESERVES_LEQ */



#define OPN meet
#define OP(X,Y) X*Y
#define CMPN leq
#define CMP(X,Y) X<=Y
#ifdef DATA_MEET_COMMUTATIVE
#define OP_COMMUTATIVE 1
#endif
#ifdef DATA_MEET_TOTAL 1
#define OP_TOTAL 1
#endif
#define CMP_TRANSITIVE 1
BEGIN_ELF
#include "OPN-preserves-CMPN.i"
END_ELF
#undef CMP_TRANSITIVE
#undef OP_TOTAL
#undef OP_COMMUTATIVE
#undef CMP
#undef CMPN
#undef OP
#undef OPN
%}%
