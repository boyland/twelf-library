%theorem scale-left-preserves-leq* :
	forall* {M1} {M2} {S} {SM1} {SM2}
	forall {L:leq M1 M2} {SC1:scale S M1 SM1} {SC2:scale S M2 SM2}
        exists {SL:leq SM1 SM2}
	true.

- : scale-left-preserves-leq* leq/0 scale/0 _ leq/0.

- : scale-left-preserves-leq* (leq/= M1<=M2 D1<=D2 nat`eq/)
                         (scale/+ S*M1=M3 S*D1=D3) (scale/+ S*M2=M4 S*D2=D4)
                         (leq/= M3<=M4 D3<=D4 nat`eq/)
    <- data`scale-left-preserves-leq* D1<=D2 S*D1=D3 S*D2=D4 D3<=D4
    <- scale-left-preserves-leq* M1<=M2 S*M1=M3 S*M2=M4 M3<=M4. 

- : scale-left-preserves-leq* (leq/> M311<=M2 P)
                         (scale/+ S*M1=M3 S*D1=D3) (scale/+ S*M2=M4 S*D2=D4)
                         (leq/> M333<=M4 P)
    <- scale-left-preserves-leq* M311<=M2 (scale/+ S*M1=M3 S*D1=D3) S*M2=M4
                            M333<=M4.

%worlds () (scale-left-preserves-leq* _ _ _ _).
%total (L) (scale-left-preserves-leq* L _ _ _).

%{%
#ifdef DATA_SCALE_LEFT_CANCELS_LEQ
%}%

%theorem scale-left-cancels-leq :
	forall* {M1} {M2} {S1} {S2} {SM1} {SM2}
	forall {SC1:scale S1 M1 SM1} {SC2:scale S2 M2 SM2}
	       {E:scalar`eq S1 S2} {SL:leq SM1 SM2} 
        exists {L:leq M1 M2} 
	true.

- : scale-left-cancels-leq scale/0 _ _ leq/0 leq/0.

- : scale-left-cancels-leq (scale/+ S*M1=M3 S*D1=D3) 
                      (scale/+ S*M2=M4 S*D2=D4) scalar`eq/ 
                      (leq/= M3<=M4 D3<=D4 nat`eq/)
                      (leq/= M1<=M2 D1<=D2 nat`eq/)
    <- data`scale-left-cancels-leq S*D1=D3 S*D2=D4 scalar`eq/ D3<=D4 D1<=D2 
    <- scale-left-cancels-leq S*M1=M3 S*M2=M4 scalar`eq/ M3<=M4 M1<=M2.

- : scale-left-cancels-leq (scale/+ S*M1=M3 S*D1=D3) (scale/+ S*M2=M4 S*D2=D4)
                         scalar`eq/ (leq/> M333<=M4 P) (leq/> M311<=M2 P) 
    <- scale-left-cancels-leq (scale/+ S*M1=M3 S*D1=D3) S*M2=M4 scalar`eq/
                              M333<=M4 M311<=M2.

%worlds () (scale-left-cancels-leq _ _ _ _ _).
%total (L) (scale-left-cancels-leq _ L _ _ _).

%{%
#endif
%}%
