%%%%% multiset-help.elf
%%%%% Theorems needed to help 'multiset' use 'map.'
%%%%% This file is part of the multiset.elf signature



%%%% Renamings


%{%
   What follows is a series of renamings, to get
   the existing nat min/max theorems named in the way
   the map functor requires.
%}%


 %abbrev nat`leq = nat`le.
 %abbrev nat`nle = nat`gt.
 %abbrev nat`false-implies-leq = nat`false-implies-le.
 %abbrev nat`leq-respects-eq = nat`le-respects-eq.
 %abbrev nat`false-implies-nle = nat`false-implies-gt.
 %abbrev nat`nle-anti-reflexive = nat`gt-anti-reflexive.
 %abbrev nat`nle-anti-symmetric = nat`gt-anti-symmetric.
 %abbrev nat`leq-reflexive = nat`le-reflexive.
 %abbrev nat`leq-transitive = nat`le-transitive.
 %abbrev nat`leq-anti-symmetric = nat`le-anti-symmetric.

 %theorem nat`nle-implies-ne :
	forall* {N1} {N2}
	forall	{NL: nat`nle N1 N2}
	exists	{NE: nat`ne N1 N2}
	true.

 - : nat`nle-implies-ne G (nat`ne/> G).

 %worlds () (nat`nle-implies-ne _ _).
 %total { } (nat`nle-implies-ne _ _).

 %theorem nat`leq-nle-contradiction :
	forall*	{N1} {N2}
	forall	{LE: nat`leq N1 N2}
		{GT: nat`nle N1 N2}
	exists	{F:void}
	true.

 - : nat`leq-nle-contradiction N2>=N1 N1>N2 F
     <- nat`gt-transitive-ge N1>N2 N2>=N1 N1>N1
     <- nat`gt-anti-reflexive N1>N1 F.

 %worlds () (nat`leq-nle-contradiction _ _ _).
 %total { } (nat`leq-nle-contradiction _ _ _).


 nat`leq? : nat -> nat -> bool -> type.

 nat`leq?/yes : nat`leq N1 N2 -> nat`leq? N1 N2 true.

 nat`leq?/no : nat`nle N1 N2 -> nat`leq? N1 N2 false.


 %theorem nat`leq?-total* :
	forall	{N1} {N2}
	exists	{B}
		{L: nat`leq? N1 N2 B}
	true.

 %abbrev nat`leq?-total = nat`leq?-total* _ _ _.

 %theorem nat`leq?-total/L :
	forall*	{N1} {N2} {CMP}
	forall	{C:compare N1 N2 CMP}
	exists	{B}
		{L: nat`leq? N1 N2 B}
	true.

 - : nat`leq?-total/L (nat`compare/< N2>N1) _ (nat`leq?/yes (nat`ge/> N2>N1)).

 - : nat`leq?-total/L (nat`compare/=) _ (nat`leq?/yes (nat`ge/= nat`eq/)).

 - : nat`leq?-total/L (nat`compare/> N1>N2) _ (nat`leq?/no N1>N2).

 %worlds () (nat`leq?-total/L _ _ _).
 %total { } (nat`leq?-total/L _ _ _).

 - : nat`leq?-total L?
     <- nat`compare-total C
     <- nat`leq?-total/L C _ L?.

 %worlds () (nat`leq?-total* _ _ _ _).
 %total { } (nat`leq?-total* _ _ _ _).


 %abbrev nat`join = nat`max.
 %abbrev nat`false-implies-join = nat`false-implies-max.
 %abbrev nat`join-deterministic = nat`max-deterministic.
 %abbrev nat`join-total* = nat`max-total*.
 %abbrev nat`join-commutative = nat`max-commutative.
 %abbrev nat`join-associative = nat`max-associative.
 %abbrev nat`join-associative* = nat`max-associative*.
 %abbrev nat`join-left-preserves-leq* = nat`max-left-preserves-le*.
 %abbrev nat`join-preserves-leq = nat`max-preserves-le.
 %abbrev nat`join-implies-leq* = [G] [L] nat`max-implies-ge G L IG.
 %abbrev nat`join-implies-leq = nat`max-implies-ge.
 %abbrev nat`join-is-lub = nat`max-is-lub.

 %abbrev nat`meet = nat`min.
 %abbrev nat`false-implies-meet = nat`false-implies-min.
 %abbrev nat`meet-respects-eq = nat`min-respects-eq.
 %abbrev nat`meet-deterministic = nat`min-deterministic.
 %abbrev nat`meet-total* = nat`min-total*.
 %abbrev nat`meet-commutative = nat`min-commutative.
 %abbrev nat`meet-associative = nat`min-associative.
 %abbrev nat`meet-associative* = nat`min-associative*.
 %abbrev nat`meet-implies-leq* = [M] [L] nat`min-implies-ge M L IG.
 %abbrev nat`meet-left-preserves-leq* = nat`min-left-preserves-le*.

 %abbrev nat`meet-is-glb = nat`min-is-glb.
 %abbrev nat`meet-right-distributes-over-join = 
         nat`min-right-distributes-over-max.
 %abbrev nat`join-right-distributes-over-meet = 
         nat`max-right-distributes-over-min.

