%{%
/*
 * Using this functor:
 * You should define the types from map-base.elf
 * and also:
 *   relation : nat -> data -> arg -> type
 *   allrelation
 *   arg (and we need arg`eq arg`eq/, and optionally arg`leq)
 * We need the following theorems:
 *   relation-respects-leq (optional)
 *
 * NB: We define
 *   relation-respects-eq
 * unless you define RELATION_RESPECTS_EQ
 * in which case, we use, but do not define it.
 *
 * If you are using "leq", you must define MAP_ALL_LEQ
 */
%}%


%%%% Definitions



allrelation : map -> arg -> type.

allrelation/0 : allrelation map/0 S.

allrelation/U :
	allrelation SM1 S ->
	relation N S1 S ->
	fresh SM1 N ->
	update SM1 N S1 SM2 ->
    allrelation SM2 S.




%%%% Theorems



%%% Extra Theorems about relation

%{%
#ifndef RELATION_RESPECTS_EQ
%}%

%theorem relation-respects-eq :
	forall*	{N1} {D1} {X1}
		{N2} {D2} {X2}
	forall	{R1: relation N1 D1 X1}
		{EN: nat`eq N1 N2}
		{ED: data`eq D1 D2}
		{EX: arg`eq X1 X2}
	exists	{R2: relation N2 D2 X2}
	true.

- : relation-respects-eq R _ _ _ R.

%worlds (WORLDS) (relation-respects-eq _ _ _ _ _).
%total { } (relation-respects-eq _ _ _ _ _).

%{%
#endif
%}%


%%% Theorems about allrelation


%theorem false-implies-allrelation :
	forall*	{M} {X}
	forall	{F: void}
	exists	{A: allrelation M X}
	true.

%worlds (WORLDS) (false-implies-allrelation _ _).
%total { } (false-implies-allrelation _ _).


%theorem allrelation-respects-eq :
	forall*	{M1} {X1} {M2} {X2}
	forall	{A1: allrelation M1 X1}
		{ME: eq M1 M2}
		{XE: arg`eq X1 X2}
	exists	{A2: allrelation M2 X2}
	true.

- : allrelation-respects-eq A _ _ A.

%worlds (WORLDS) (allrelation-respects-eq _ _ _ _).
%total { } (allrelation-respects-eq _ _ _ _).


%theorem allrelation/U-inversion :
	forall*	{M1} {M2} {X} {N} {D}
	forall	{A2: allrelation M2 X}
		{F: fresh M1 N}
		{U: update M1 N D M2} 
	exists	{A1: allrelation M1 X}
		{R: relation N D X}
	true.

%theorem allrelation/U-inversion/L :
	forall*	{N0} {D0} {M0} {X} {N} {D} {B} {M1} {M2}
	forall	{A0: allrelation M0 X}
		{R1: relation N0 D0 X}
		{F0: fresh M0 N0}
		{U0: update M0 N0 D0 M2}
		{F1: fresh M1 N}
		{U1: update M1 N D M2}
		{EQ?: nat`eq? N N0 B}
	exists	{A1: allrelation M1 X}
		{R: relation N D X}		
	true.

- : allrelation/U-inversion/L A0 R0 F0 U0 F1 U1 nat`eq?/yes A1 R1
    <- fresh-update-cancels F0 U0 F1 U1 nat`eq/ eq/ D0=D1 M0=M1
    <- allrelation-respects-eq A0 M0=M1 arg`eq/ A1
    <- relation-respects-eq R0 nat`eq/ D0=D1 arg`eq/ R1.

- : allrelation/U-inversion/L 
	A0 R0 F0 U0 F1 U1 (nat`eq?/no N<>N1) (allrelation/U A2 R0 F3 U3) R1
    <- update-commutes-converse U1 U0 N<>N1 _ U3 U2
    <- update-preserves-fresh-converse F1 U3 F2
    <- allrelation/U-inversion A0 F2 U2 A2 R1
    <- update-preserves-fresh-converse F0 U2 F3.

- : allrelation/U-inversion (allrelation/U A0 R0 F0 U0) F U A1 R
    <- nat`eq?-total EQ?
    <- allrelation/U-inversion/L A0 R0 F0 U0 F U EQ? A1 R.

%worlds (WORLDS) (allrelation/U-inversion _ _ _ _ _)
           (allrelation/U-inversion/L _ _ _ _ _ _ _ _ _).
%total (A B) 
	   (allrelation/U-inversion A _ _ _ _)
           (allrelation/U-inversion/L B _ _ _ _ _ _ _ _).


%theorem fresh-update-preserves-allrelation-converse :
	forall*	{M1} {M2} {X} {N} {D}
	forall	{A2: allrelation M2 X}
		{F: fresh M1 N}
		{U: update M1 N D M2} 
	exists	{A1: allrelation M1 X}
	true.

- : fresh-update-preserves-allrelation-converse A2 F U A1
    <- allrelation/U-inversion A2 F U A1 _.

%worlds (WORLDS) (fresh-update-preserves-allrelation-converse _ _ _ _).
%total { } (fresh-update-preserves-allrelation-converse _ _ _ _).


%theorem allrelation-lookup-implies-relation :
	forall*	{M} {X} {N} {D}
	forall	{A: allrelation M X}
		{L: lookup M N D}
	exists	{R: relation N D X}
	true.

% could rewrite using lookup-implies-fresh-update and allrelation/U-inversion

%theorem allrelation-lookup-implies-relation/L :
	forall*	{N1} {D1} {M1} {X} {N} {D} {B} {M2}
	forall	{A: allrelation M1 X}
		{R1: relation N1 D1 X}
		{U: update M1 N1 D1 M2}
		{L: lookup M2 N D}
		{EQ?: nat`eq? N N1 B}
	exists	{R: relation N D X}
	true.

- : allrelation-lookup-implies-relation/L _ R1 U1 L nat`eq?/yes R
    <- update-implies-lookup U1 L1
    <- lookup-deterministic L1 L eq/ nat`eq/ D1=D
    <- relation-respects-eq R1 nat`eq/ D1=D arg`eq/ R.

- : allrelation-lookup-implies-relation/L 
	A1 _ U L (nat`eq?/no N<>N1) R
    <- update-preserves-lookup-converse L U N<>N1 L1
    <- allrelation-lookup-implies-relation A1 L1 R.

- : allrelation-lookup-implies-relation (allrelation/U A1 R1 _ U1) L R
    <- nat`eq?-total EQ?
    <- allrelation-lookup-implies-relation/L A1 R1 U1 L EQ? R.

%worlds (WORLDS) (allrelation-lookup-implies-relation _ _ _)
           (allrelation-lookup-implies-relation/L _ _ _ _ _ _).
%total (A B) 
	   (allrelation-lookup-implies-relation A _ _)
           (allrelation-lookup-implies-relation/L B _ _ _ _ _).


%theorem relation-update-preserves-allrelation :
	forall*	{M1} {X} {N} {D} {M2}
	forall	{A1: allrelation M1 X}
		{R: relation N D X}
		{U: update M1 N D M2}
	exists	{A2: allrelation M2 X}
	true.

%theorem relation-update-preserves-allrelation/L :
	forall*	{M1} {X} {N} {D} {M2} {B}
	forall	{A1: allrelation M1 X}
		{R: relation N D X}
		{D?: domain? M1 N B}
		{U: update M1 N D M2}
	exists	{A2: allrelation M2 X}
	true.

- : relation-update-preserves-allrelation/L A R (domain?/out F) U 
	(allrelation/U A R F U).

- : relation-update-preserves-allrelation/L A R (domain?/in L) U
	(allrelation/U A1 R F U2)
    <- lookup-implies-fresh-update L _ F U1
    <- allrelation/U-inversion A F U1 A1 R1
    <- update-overwrites U1 U nat`eq/ U2.
 
%worlds (WORLDS) (relation-update-preserves-allrelation/L _ _ _ _ _).
%total { } (relation-update-preserves-allrelation/L _ _ _ _ _).

- : relation-update-preserves-allrelation A R U AP
    <- domain?-total D?
    <- relation-update-preserves-allrelation/L A R D? U AP.

%worlds (WORLDS) (relation-update-preserves-allrelation _ _ _ _).
%total { } (relation-update-preserves-allrelation _ _ _ _).

%{%
#ifdef MAP_ALL_LEQ
%}%

%theorem allrelation-respects-leq :
	forall*	{M} {X1} {X2}
	forall	{A1: allrelation M X1}
		{L: arg`leq X1 X2}
	exists	{A2: allrelation M X2}
	true.

- : allrelation-respects-leq allrelation/0 _ allrelation/0.

- : allrelation-respects-leq
	(allrelation/U A1 R1 F U) XL
	(allrelation/U A2 R2 F U)
    <- allrelation-respects-leq A1 XL A2
    <- relation-respects-leq R1 XL R2.

%worlds (WORLDS) (allrelation-respects-leq _ _ _).
%total (A) (allrelation-respects-leq A _ _).

%{%
#endif

#ifdef DATA_JOIN_PRESERVES_RELATION
%}%

%theorem join-preserves-allrelation: 
	forall* {M1} {M2} {M} {X}
	forall 	{A1: allrelation M1 X}
    		{A2: allrelation M2 X}
    		{J: join M1 M2 M}
    	exists {A: allrelation M X}
    	true.

%theorem join-preserves-allrelation/L: 
	forall* {M1} {M2} {M} {X}
    	forall	{N} {Z: size M N}
    		{A1: allrelation M1 X}
    		{A2: allrelation M2 X}
    		{J: join M1 M2 M}
    	exists  {A: allrelation M X}
    	true.

- : join-preserves-allrelation/L _ _ allrelation/0 A join/L A.

- : join-preserves-allrelation/L _ _ A allrelation/0 join/R A.

%theorem join-preserves-allrelation/LL: 
	forall* {M1} {M2} {M} {MP} {X} {K} {D} {B1} {B2}
    	forall  {N} {Z: size M N}
    		{A1: allrelation M1 X}
    		{A2: allrelation M2 X}
    		{J: join M1 M2 M}
    		{F: fresh MP K}
    		{U: update MP K D M}
    		{D1?: domain? M1 K B1}
    		{D2?: domain? M2 K B2}
    	exists	{A: allrelation M X}
    	true.

- : join-preserves-allrelation/LL (s N) Z A1 A2 J F (Ux:update MP K Dx M)
    (domain?/in L1) (domain?/in L2) (allrelation/U AP P F Uy)
    <- join-joins-lookup L1 L2 J Dy DJ Ly
    <- lookup-implies-fresh-update L1 _ F1 U1
    <- lookup-implies-fresh-update L2 _ F2 U2
    <- update-implies-lookup Ux Lx
    <- lookup-unique Lx Ly eq/ nat`eq/ X=Y
    <- update-respects-eq Ux eq/ nat`eq/ X=Y eq/ Uy
    <- fresh-update-preserves-join-converse* F1 U1 F2 U2 J F Uy DJ JP
    <- allrelation/U-inversion A1 F1 U1 A1P P1
    <- allrelation/U-inversion A2 F2 U2 A2P P2
    <- data`join-preserves-relation P1 P2 DJ P
    <- fresh-update-increases-size-converse Z F Ux ZP
    <- join-preserves-allrelation/L _ ZP A1P A2P JP AP.

- : join-preserves-allrelation/LL (s N) Z A1 A2 J F U
    (domain?/in _) (domain?/out F2)
    (allrelation/U AP P1 F U)
    <- update-implies-lookup U L
    <- fresh-join-right-preserves-lookup-converse L F2 J L1
    <- lookup-implies-fresh-update L1 _ F1 U1
    <- allrelation/U-inversion A1 F1 U1 A1P P1
    <- fresh-update-left-preserves-join-converse* F1 U1 F2 J F U J1
    <- fresh-update-increases-size-converse Z F U Z1
    <- join-preserves-allrelation/L _ Z1 A1P A2 J1 AP.

- : join-preserves-allrelation/LL (s N) Z A1 A2 J F U
    (domain?/out F1) (domain?/in _)
    (allrelation/U AP P2 F U)
    <- update-implies-lookup U L
    <- fresh-join-left-preserves-lookup-converse F1 L J L2
    <- lookup-implies-fresh-update L2 _ F2 U2
    <- allrelation/U-inversion A2 F2 U2 A2P P2
    <- fresh-update-right-preserves-join-converse* F1 F2 U2 J F U J2
    <- fresh-update-increases-size-converse Z F U Z1
    <- join-preserves-allrelation/L _ Z1 A1 A2P J2 AP.

- : join-preserves-allrelation/LL _ _ _ _ J _ U
    (domain?/out F1) (domain?/out F2) A
    <- join-preserves-fresh* F1 F2 J F
    <- update-implies-lookup U L
    <- fresh-lookup-not-equal F L N<>N
    <- nat`ne-anti-reflexive N<>N V
    <- false-implies-allrelation V A.

- : join-preserves-allrelation/L (s N) Z A1 A2 J A
    <- lookup-implies-fresh-update (lookup/= nat`eq/) _ F U
    <- domain?-total D1?
    <- domain?-total D2?
    <- join-preserves-allrelation/LL (s N) Z A1 A2 J F U D1? D2? A.

%worlds () (join-preserves-allrelation/L _ _ _ _ _ _)
       (join-preserves-allrelation/LL _ _ _ _ _ _ _ _ _ _).
%total (N1 N2) (join-preserves-allrelation/LL N1 _ _ _ _ _ _ _ _ _)
       (join-preserves-allrelation/L N2 _ _ _ _  _).

- : join-preserves-allrelation A1 A2 J A
    <- size-total Z
    <- join-preserves-allrelation/L _ Z A1 A2 J A.

%worlds () (join-preserves-allrelation _ _ _ _).
%total {} (join-preserves-allrelation _ _ _ _).

%{%
#endif /* DATA_JOIN_PRESERVES_RELATION */
%}%

